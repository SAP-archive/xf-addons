{
    "openapi": "3.0.0",
    "info": {
      "title": "Qualtrics APIs",
      "description": "Qualtrics APIs",
      "license": {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "version": "3.0.0"
    },
    "paths": {
        "/surveys/{surveyId}/responses": {
          "post": {
            "summary": "Create a New Response",
            "tags": [
              "Responses"
            ],
            "description": "Creates a new survey response in an existing survey",
            "operationId": "createResponse",
            "parameters": [
              {
                "$ref": "#/components/parameters/surveyId"
              },
              {
                "$ref": "#/components/parameters/idempotencyKey"
              }
            ],
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateResponseRequest"
                  },
                  "example": {
                    "values": {
                      "startDate": "2019-01-31T1:00:00Z",
                      "endDate": "2019-01-31T1:01:02Z",
                      "status": 1,
                      "progress": 100,
                      "duration": 62,
                      "finished": 1,
                      "recordedDate": "2019-01-31T1:01:03.885Z",
                      "locationLatitude": "90.00000000000000",
                      "locationLongitude": "135.0000000000000000",
                      "distributionChannel": "preview",
                      "userLanguage": "EN"
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Survey Response Successfully Created",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CreateResponseResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Survey Response Format or Response Already Exists",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/DefaultErrorResponse"
                    },
                    "examples": {
                      "response": {
                        "value": {
                          "meta": {
                            "httpStatus": "400 - Bad Request",
                            "requestId": "900df19-75fd-479d-b4c2-6fd1f4b7b3e0",
                            "error": {
                              "errorCode": "ERR_X",
                              "errorMessage": "Bad Response Format"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SurveyNotFoundResponse"
                    }
                  }
                }
              },
              "413": {
                "description": "Survey Response Is Too Large",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SurveyResponseTooLargeResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/DefaultErrorResponse"
                    }
                  }
                }
              }
            }
          }
        },
        "/surveys/{surveyId}/responses/{responseId}": {
          "get": {
            "summary": "Retrieve a Survey Response",
            "tags": [
              "Responses"
            ],
            "description": "Retrieves a survey response from a survey",
            "operationId": "getResponse",
            "parameters": [
              {
                "$ref": "#/components/parameters/surveyId"
              },
              {
                "$ref": "#/components/parameters/responseId"
              }
            ],
            "responses": {
              "200": {
                "description": "Survey Response Successfully Retrieved",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GetResponseResponse"
                    }
                  }
                }
              },
              "202": {
                "description": "Survey Response Not Yet Available",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/NotYetAvailableResponse"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SurveyNotFoundResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/DefaultErrorResponse"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "summary": "Delete a Survey Response",
            "tags": [
              "Responses"
            ],
            "description": "Deletes a single survey response",
            "operationId": "deleteResponse",
            "parameters": [
              {
                "$ref": "#/components/parameters/surveyId"
              },
              {
                "$ref": "#/components/parameters/responseId"
              },
              {
                "$ref": "#/components/parameters/decrementQuotas"
              }
            ],
            "responses": {
              "200": {
                "description": "Survey Response Deleted",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/DeleteResponseResponse"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SurveyNotFoundResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/DefaultErrorResponse"
                    }
                  }
                }
              }
            }
          }
        },
        "/directories/{directoryId}/mailinglists/{mailingListId}/bouncedContacts": {
            "get": {
              "tags": [
                "Mailing Lists",
                "paginated"
              ],
              "summary": "Get contacts in a mailing list who have had an email bounce.",
              "description": "Using the provided query parameters, the API client can paginate through all relevant contacts.",
              "operationId": "getMailingListBouncedContacts",
              "parameters": [
                {
                  "$ref": "#/components/parameters/since"
                },
                {
                  "$ref": "#/components/parameters/pageSize"
                },
                {
                  "$ref": "#/components/parameters/skipToken"
                },
                {
                  "$ref": "#/components/parameters/mailingListId"
                },
                {
                  "$ref": "#/components/parameters/directoryId"
                }
              ],
              "responses": {
                "200": {
                  "description": "A collection of contacts",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PageOfContacts"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid arguments response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/InvalidArguments"
                      }
                    }
                  }
                }
              }
            }
          },
          "/directories/{directoryId}/mailinglists/{mailingListId}/optedOutContacts": {
            "get": {
              "tags": [
                "Mailing Lists",
                "paginated"
              ],
              "summary": "Get contacts in a mailing list who have opted out",
              "description": "Using the provided query parameters, the API client can paginate through all relevant contacts.",
              "operationId": "getMailingListOptedOutContacts",
              "parameters": [
                {
                  "$ref": "#/components/parameters/pageSize"
                },
                {
                  "$ref": "#/components/parameters/skipToken"
                },
                {
                  "$ref": "#/components/parameters/mailingListId"
                },
                {
                  "$ref": "#/components/parameters/directoryId"
                }
              ],
              "responses": {
                "200": {
                  "description": "A collection of contacts",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PageOfContacts"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid arguments response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/InvalidArguments"
                      }
                    }
                  }
                }
              }
            }
          },
          "/directories": {
            "get": {
              "summary": "List directories for a brand",
              "tags": [
                "Directories",
                "paginated"
              ],
              "description": "Using this API, the client can retrieve a list of directories with summary information for each directory.  This API is paginated, but currently returns a single page of upto 5 results and a null next page token",
              "operationId": "getDirectories",
              "parameters": [
                {
                  "$ref": "#/components/parameters/pageSize"
                },
                {
                  "$ref": "#/components/parameters/skipToken"
                }
              ],
              "responses": {
                "200": {
                  "description": "A collection of directories",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PageOfDirectories"
                      }
                    }
                  }
                },
                "default": {
                  "description": "A default error response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DefaultErrorResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "/organizations/{organizationId}": {
            "get": {
              "tags": [],
              "summary": "Get Organization",
              "description": "Gets general information about an organization",
              "operationId": "get-brand-info",
              "parameters": [
                {
                  "name": "organizationId",
                  "in": "path",
                  "description": "Organization ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/organizations/{organizationId}"
            }
          },
          "/divisions": {
            "post": {
              "tags": [],
              "summary": "Create Division",
              "description": "Creates a new division",
              "operationId": "create-division",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Division name"
                        },
                        "divisionAdmins": {
                          "type": "array",
                          "description": "A JSON array array of user ids to make division admins",
                          "items": {
                            "type": "string"
                          }
                        },
                        "permissions": {
                          "type": "object",
                          "description": "JSON object defining the division permissions.",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/divisions"
            }
          },
          "/divisions/{divisionId}": {
            "get": {
              "tags": [],
              "summary": "Get Division",
              "description": "Gets general information about the division",
              "operationId": "get-division",
              "parameters": [
                {
                  "name": "divisionId",
                  "in": "path",
                  "description": "Division ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/divisions/{divisionId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Division",
              "description": "Updates existing division",
              "operationId": "update-division",
              "parameters": [
                {
                  "name": "divisionId",
                  "in": "path",
                  "description": "Division ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "New Division Name"
                        },
                        "status": {
                          "type": "string",
                          "description": "New status of the division (\"Active\", \"Disabled\")"
                        },
                        "permissions": {
                          "type": "object",
                          "description": "JSON object with permissions to update",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/divisions/{divisionId}"
            }
          },
          "/groups": {
            "get": {
              "tags": [],
              "summary": "List Groups",
              "description": "Gets list of all groups known to the user account",
              "operationId": "list-groups",
              "parameters": [
                {
                  "name": "divisionId",
                  "in": "query",
                  "description": "Only include groups assigned to this division",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination. The default offset is 0. If there are additional pages, the offset value for the next page will be appended to the value of the nextPage parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/groups"
            },
            "post": {
              "tags": [],
              "summary": "Create Group",
              "description": "Creates a new group",
              "operationId": "create-group",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "type",
                        "name"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Group Type. Currently this is a GAP as you cannot create group types with an API nor look them up.  But you need that to create a Group."
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of group to be created"
                        },
                        "divisionId": {
                          "type": "string",
                          "description": "ID of the division to assign the group to"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/groups"
            }
          },
          "/groups/{groupId}": {
            "get": {
              "tags": [],
              "summary": "Get Group",
              "description": "Gets information about a specified group.",
              "operationId": "get-group",
              "parameters": [
                {
                  "name": "groupId",
                  "in": "path",
                  "description": "Group ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/groups/{groupId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Group",
              "description": "Updates a specific group with the optional parameters included",
              "operationId": "update-group",
              "parameters": [
                {
                  "name": "groupId",
                  "in": "path",
                  "description": "Group ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "New Group Type"
                        },
                        "divisionId": {
                          "type": "string",
                          "description": "New Division ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "New Name"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/groups/{groupId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Group",
              "description": "Deletes a group",
              "operationId": "delete-group",
              "parameters": [
                {
                  "name": "groupId",
                  "in": "path",
                  "description": "Group ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/groups/{groupId}"
            }
          },
          "/groups/{groupId}/members": {
            "post": {
              "tags": [],
              "summary": "Add User to Group",
              "description": "",
              "operationId": "add-user-to-group",
              "parameters": [
                {
                  "name": "groupId",
                  "in": "path",
                  "description": "Group ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "userId"
                      ],
                      "properties": {
                        "userId": {
                          "type": "string",
                          "description": "ID of the user to add to the group"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/groups/{groupId}/members"
            }
          },
          "/groups/:groupId/members/{userId}": {
            "delete": {
              "tags": [],
              "summary": "Remove User from Group",
              "description": "",
              "operationId": "remove-user-from-group",
              "parameters": [
                {
                  "name": "groupId",
                  "in": "path",
                  "description": "Group ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "userId",
                  "in": "path",
                  "description": "User ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/groups/{groupId}/members/{userId}"
            }
          },
          "/users": {
            "get": {
              "tags": [],
              "summary": "List Users",
              "description": "Gets all users in the collection",
              "operationId": "list-users",
              "parameters": [
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination. The default offset is 0. If there are additional pages, the offset value for the next page will be appended to the value of the nextPage parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                {
                  "name": "username",
                  "in": "query",
                  "description": "If specified, will retrieve information of the User identified by username.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/users"
            },
            "post": {
              "tags": [],
              "summary": "Create User",
              "description": "Creates a new user account",
              "operationId": "create-user",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "username",
                        "password",
                        "firstName",
                        "lastName",
                        "userType",
                        "email",
                        "language"
                      ],
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "Unique Qualtrics username (Must be a valid email.)"
                        },
                        "password": {
                          "type": "string",
                          "description": "Password for the new user"
                        },
                        "firstName": {
                          "type": "string",
                          "description": "First Name of the new user"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Last Name of the new user"
                        },
                        "userType": {
                          "type": "string",
                          "description": "User type of the new user"
                        },
                        "email": {
                          "type": "string",
                          "description": "Email for the new user - must be a valid email (Can be the same as the username.)"
                        },
                        "language": {
                          "type": "string",
                          "description": "The [language code](/docs/language-codes) to be used for the users account."
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The [time zone](/docs/time-zones) setting for the new user."
                        },
                        "divisionId": {
                          "type": "string",
                          "description": "ID of the division that the user will be assigned"
                        },
                        "accountExpirationDate": {
                          "type": "string",
                          "description": "Expiration date for the created user's account. See [Dates and Times](doc:dates-and-times) for more information on the date and time format.",
                          "format": "date"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/users"
            }
          },
          "/users/{userId}": {
            "get": {
              "tags": [],
              "summary": "Get User",
              "description": "Gets general information about a user",
              "operationId": "get-user",
              "parameters": [
                {
                  "name": "userId",
                  "in": "path",
                  "description": "User ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/users/{userId}"
            },
            "put": {
              "tags": [],
              "summary": "Update User",
              "description": "Updates a users information",
              "operationId": "update-user",
              "parameters": [
                {
                  "name": "userId",
                  "in": "path",
                  "description": "User ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "New username (Must be a valid email.)"
                        },
                        "firstName": {
                          "type": "string",
                          "description": "New first name"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "New last name"
                        },
                        "userType": {
                          "type": "string",
                          "description": "New account type"
                        },
                        "divisionId": {
                          "type": "string",
                          "description": "New division"
                        },
                        "status": {
                          "type": "string",
                          "description": "New account status (active, disabled, notVerified)"
                        },
                        "language": {
                          "type": "string",
                          "description": "The [language code](/docs/language-codes) to use for the user's account"
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "The [time zone](/docs/time-zones) setting for the new user's account"
                        },
                        "permissions": {
                          "type": "object",
                          "description": "New permissions values. This is an additive patch of the permissions given. States can be [on, off, userType]",
                          "properties": {}
                        },
                        "accountExpirationDate": {
                          "type": "string",
                          "description": "Expiration date for the created user's account. See [Dates and Times](doc:dates-and-times) for more information on the date and time format.",
                          "format": "date"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/users/{userId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete User",
              "description": "Deletes a user",
              "operationId": "delete-user",
              "parameters": [
                {
                  "name": "userId",
                  "in": "path",
                  "description": "User ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/users/{userId}"
            }
          },
          "/users/{userId}/apitoken": {
            "get": {
              "tags": [],
              "summary": "Get User API Token",
              "description": "",
              "operationId": "get-user-api-token",
              "parameters": [
                {
                  "name": "userId",
                  "in": "path",
                  "description": "User ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/users/{userId}/apitoken"
            },
            "post": {
              "tags": [],
              "summary": "Create User API Token",
              "description": "",
              "operationId": "create-user-api-token",
              "parameters": [
                {
                  "name": "userId",
                  "in": "path",
                  "description": "User ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "post",
              "_path": "/users/{userId}/apitoken"
            }
          },
          "/whoami": {
            "get": {
              "tags": [],
              "summary": "Who Am I",
              "description": "Determine the user ID and other user information associated with an Qualtrics API token or a Qualtrics OAuth access token.",
              "operationId": "who-am-i",
              "parameters": [
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "The Qualtrics API token. Include either this or a Qualtrics OAuth access token, but not both.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "Authorization",
                  "in": "header",
                  "description": "The OAuth 2.0 standard header - the value should be \"Bearer \" followed by the OAuth access token. Include either this header or X-API-TOKEN, but not both.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/whoami"
            }
          },
          "/surveys/{surveyId}": {
            "get": {
              "tags": [],
              "summary": "Get Survey",
              "description": "Gets survey information",
              "operationId": "get-survey",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/surveys/{surveyId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Survey",
              "description": "Updates a survey",
              "operationId": "update-survey",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "New survey name"
                        },
                        "isActive": {
                          "type": "boolean",
                          "description": "Survey status"
                        },
                        "expiration": {
                          "type": "string",
                          "description": "Defines the active time range for the survey. Example: {\"startDate\":\"2016-01-01T01:00:00Z\", \"endDate\":\"2016-03-01T01:00:00Z\"}. See [Dates and Times](doc:dates-and-times) for more information on the date and time format."
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/surveys/{surveyId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Survey",
              "description": "Deletes a survey",
              "operationId": "delete-survey",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/surveys/{surveyId}"
            }
          },
          "/surveys": {
            "get": {
              "tags": [],
              "summary": "List Surveys",
              "description": "Returns meta data for all surveys available to the user",
              "operationId": "list-surveys",
              "parameters": [
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination. The default offset is 0. If there are additional pages, the offset value for the next page will be appended to the value of the nextPage parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/surveys"
            },
            "post": {
              "tags": [],
              "summary": "Copy Survey",
              "description": "Copy a survey from one user to another",
              "operationId": "copy-survey",
              "parameters": [
                {
                  "name": "X-COPY-SOURCE",
                  "in": "header",
                  "description": "The surveyId for the survey to be copied",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "X-COPY-DESTINATION-OWNER",
                  "in": "header",
                  "description": "The userId for the user receiving the copied survey",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "projectName": {
                          "type": "string",
                          "description": "The name for the copied survey, if there's no body parameters then it'll reuse the existing name"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/surveys"
            }
          },
          "/surveys/{surveyId}/permissions/collaborations": {
            "post": {
              "tags": [],
              "summary": "Share Survey",
              "description": "Share a survey with another user in your brand",
              "operationId": "share-survey",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "userId",
                        "permissions"
                      ],
                      "properties": {
                        "userId": {
                          "type": "string",
                          "description": "The userId of the account the survey is being shared to"
                        },
                        "permissions": {
                          "type": "object",
                          "description": "The various permissions being assigned to the user regarding the shared survey",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/surveys/{surveyId}/permissions/collaborations"
            }
          },
          "/surveys/{surveyId}/embeddeddatafields": {
            "post": {
              "tags": [],
              "summary": "Insert Embedded Data Fields",
              "description": "",
              "operationId": "insert-embedded-data-fields",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "The survey ID of the survey you want to insert embedded data fields into.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "embeddedDataFields": {
                          "type": "object",
                          "description": "An array of free-form JSON objects.  See below.",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/surveys/{surveyId}/embeddeddatafields"
            }
          },
          "/surveys/{surveyId}/quotas": {
            "get": {
              "tags": [],
              "summary": "Get Survey Quotas",
              "description": "Gets information about a survey's quota",
              "operationId": "get-survey-quotas",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/surveys/{surveyId}/quotas"
            }
          },
          "/surveys/{surveyId}/languages": {
            "get": {
              "tags": [],
              "summary": "Get Survey Languages",
              "description": "Gets the available languages for a survey",
              "operationId": "get-survey-languages",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/surveys/{surveyId}/languages"
            },
            "put": {
              "tags": [],
              "summary": "Update Survey Languages",
              "description": "Updates enabled languages for a survey",
              "operationId": "update-survey-languages",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "AvailableLanguages"
                      ],
                      "properties": {
                        "AvailableLanguages": {
                          "type": "array",
                          "description": "Array of language codes to enable",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/surveys/{surveyId}/languages"
            }
          },
          "/surveys/:surveyId/translations/{languageCode}": {
            "get": {
              "tags": [],
              "summary": "Get Survey Translations",
              "description": "Gets information about survey translations",
              "operationId": "get-survey-translations",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "languageCode",
                  "in": "path",
                  "description": "Language Code",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/surveys/{surveyId}/translations/{languageCode}"
            }
          },
          "/surveys/{surveyId}/translations/{languageCode}": {
            "put": {
              "tags": [],
              "summary": "Update Survey Translations",
              "description": "Updates translations for a survey",
              "operationId": "update-survey-translations",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "languageCode",
                  "in": "path",
                  "description": "Language Code",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "Survey Fields": {
                          "type": "object",
                          "description": "",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/surveys/{surveyId}/translations/{languageCode}"
            }
          },
          "/survey-definitions/{surveyId}/questions/{questionId}": {
            "get": {
              "tags": [],
              "summary": "Get Question",
              "description": "",
              "operationId": "get-question",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "questionId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/survey-definitions/{surveyId}/questions/{questionId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Question",
              "description": "",
              "operationId": "update-question",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "questionId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "put",
              "_path": "/survey-definitions/{surveyId}/questions/{questionId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Question",
              "description": "",
              "operationId": "delete-question",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "questionId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/survey-definitions/{surveyId}/questions/{questionId}"
            }
          },
          "/survey-definitions/{surveyId}/questions": {
            "get": {
              "tags": [],
              "summary": "List Questions",
              "description": "",
              "operationId": "list-questions-1",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/survey-definitions/{surveyId}/questions"
            },
            "post": {
              "tags": [],
              "summary": "Create Question",
              "description": "",
              "operationId": "create-question",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "blockId",
                  "in": "query",
                  "description": "Determines the block the question will be listed under. If not provided, the question is created under the default block of the survey.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "post",
              "_path": "/survey-definitions/{surveyId}/questions"
            }
          },
          "/survey-definitions/{surveyId}/flow": {
            "put": {
              "tags": [],
              "summary": "Update Flow",
              "description": "",
              "operationId": "update-flow",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "put",
              "_path": "/survey-definitions/{surveyId}/flow"
            },
            "get": {
              "tags": [],
              "summary": "Get Flow",
              "description": "",
              "operationId": "get-flow",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/survey-definitions/{surveyId}/flow"
            }
          },
          "/survey-definitions/{surveyId}/flow/{flowId}": {
            "put": {
              "tags": [],
              "summary": "Update Flow Element",
              "description": "",
              "operationId": "update-flow-element-1",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "flowId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "put",
              "_path": "/survey-definitions/{surveyId}/flow/{flowId}"
            }
          },
          "/survey-definitions/{surveyId}/blocks/{blockId}": {
            "get": {
              "tags": [],
              "summary": "Get Block",
              "description": "",
              "operationId": "get-block",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "blockId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/survey-definitions/{surveyId}/blocks/{blockId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Block",
              "description": "",
              "operationId": "update-block",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "blockId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "put",
              "_path": "/survey-definitions/{surveyId}/blocks/{blockId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Block",
              "description": "",
              "operationId": "delete-block-1",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "blockId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/survey-definitions/{surveyId}/blocks/{blockId}"
            }
          },
          "/survey-definitions/{surveyId}/blocks": {
            "post": {
              "tags": [],
              "summary": "Create Block",
              "description": "",
              "operationId": "create-block",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "post",
              "_path": "/survey-definitions/{surveyId}/blocks"
            }
          },
          "/survey-definitions/{surveyId}/options": {
            "get": {
              "tags": [],
              "summary": "Get Options",
              "description": "",
              "operationId": "get-options",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/survey-definitions/{surveyId}/options"
            },
            "put": {
              "tags": [],
              "summary": "Update Options",
              "description": "",
              "operationId": "update-options",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "put",
              "_path": "/survey-definitions/{surveyId}/options"
            }
          },
          "/survey-definitions/{surveyId}/metadata": {
            "get": {
              "tags": [],
              "summary": "Get Survey Metadata",
              "description": "",
              "operationId": "get-survey-metadata",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/survey-definitions/{surveyId}/metadata"
            }
          },
          "/survey-definitions/{surveyId}": {
            "get": {
              "tags": [],
              "summary": "Get Survey",
              "description": "",
              "operationId": "get-survey-1",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "format",
                  "in": "query",
                  "description": "json or qsf",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "default": "json"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/survey-definitions/{surveyId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Survey",
              "description": "",
              "operationId": "delete-survey-1",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/survey-definitions/{surveyId}"
            }
          },
          "/survey-definitions": {
            "post": {
              "tags": [],
              "summary": "Import Survey",
              "description": "",
              "operationId": "import-survey-3",
              "parameters": [],
              "requestBody": null,
              "deprecated": false,
              "_method": "post",
              "_path": "/survey-definitions"
            }
          },
          "/survey-definitions/{surveyId}/versions": {
            "post": {
              "tags": [],
              "summary": "Create Survey Version",
              "description": "",
              "operationId": "create-survey-version",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "post",
              "_path": "/survey-definitions/{surveyId}/versions"
            },
            "get": {
              "tags": [],
              "summary": "List Survey Versions",
              "description": "",
              "operationId": "list-survey-versions-1",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/survey-definitions/{surveyId}/versions"
            }
          },
          "/survey-definitions/{surveyId}/versions/{versionId}": {
            "get": {
              "tags": [],
              "summary": "Get Survey Version",
              "description": "",
              "operationId": "get-survey-version",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "versionId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "format",
                  "in": "query",
                  "description": "json or qsf",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "default": "json"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/survey-definitions/{surveyId}/versions/{versionId}"
            }
          },
          "/surveys/{surveyId}/sessions": {
            "post": {
              "tags": [],
              "summary": "Create Session",
              "description": "Start a survey session",
              "operationId": "create-session",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "language"
                      ],
                      "properties": {
                        "language": {
                          "type": "string",
                          "description": "The language the survey should be taken in."
                        },
                        "embeddedData": {
                          "type": "object",
                          "description": "Any embedded data to set on the survey session.",
                          "properties": {}
                        },
                        "recipientId": {
                          "type": "string",
                          "description": "A contact recipient id"
                        },
                        "distributionId": {
                          "type": "string",
                          "description": "A distribution id"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/surveys/{surveyId}/sessions"
            }
          },
          "/surveys/{surveyId}/sessions/{sessionId}": {
            "post": {
              "tags": [],
              "summary": "Close Session",
              "description": "Close a survey session",
              "operationId": "close-session",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sessionId",
                  "in": "path",
                  "description": "Session ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "close"
                      ],
                      "properties": {
                        "close": {
                          "type": "boolean",
                          "description": "Indicates the session will be closed instead of updated"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/surveys/{surveyId}/sessions/{sessionId}"
            },
            "get": {
              "tags": [],
              "summary": "Get Session",
              "description": "Get a survey session",
              "operationId": "get-session",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sessionId",
                  "in": "path",
                  "description": "Session ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/surveys/{surveyId}/sessions/{sessionId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Session",
              "description": "Delete a survey session",
              "operationId": "delete-session",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sessionId",
                  "in": "path",
                  "description": "Session ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/surveys/{surveyId}/sessions/{sessionId}"
            }
          },
          "/surveys/{surveyId}/export-responses": {
            "post": {
              "tags": [],
              "summary": "Create Response Export",
              "description": "Starts an export of a survey's responses.",
              "operationId": "create-response-export-new",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "format"
                      ],
                      "properties": {
                        "format": {
                          "type": "string",
                          "description": "csv, tsv, spss, json, or ndjson",
                          "default": "csv, tsv, spss, json, or ndjson"
                        },
                        "startDate": {
                          "type": "string",
                          "description": "Only export responses recorded after the specified date. See [Dates and Times](doc:dates-and-times) for more information on the date and time format."
                        },
                        "endDate": {
                          "type": "string",
                          "description": "Only exports responses recorded before the specified date. See [Dates and Times](doc:dates-and-times) for more information on the date and time format."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Maximum number of responses exported.",
                          "format": "int32"
                        },
                        "useLabels": {
                          "type": "boolean",
                          "description": "Instead of exporting the recode value for the answer choice, export the text of the answer choice. For more information on recode values, see [Recode Values](https://www.qualtrics.com/support/survey-platform/survey-module/question-options/recode-values/)."
                        },
                        "seenUnansweredRecode": {
                          "type": "integer",
                          "description": "Recode seen but unanswered questions with this value.",
                          "format": "int32"
                        },
                        "multiselectSeenUnansweredRecode": {
                          "type": "integer",
                          "description": "Recode seen but unanswered choices for multi-select questions. Default is seenUnansweredRecode value.",
                          "format": "int32"
                        },
                        "includeDisplayOrder": {
                          "type": "boolean",
                          "description": "Include display order information in your export. Useful for surveys with randomization."
                        },
                        "formatDecimalAsComma": {
                          "type": "boolean",
                          "description": "Use a comma as a decimal separator instead of a period."
                        },
                        "timeZone": {
                          "type": "string",
                          "description": "Timezone used to determine response date values. See [timezones](doc:time-zones) for more information on time zone format. If this parameter is not provided, dates will be exported in UTC/GMT."
                        },
                        "newlineReplacement": {
                          "type": "string",
                          "description": "Configures the newline delimiter for the export. By default, newlines are preserved. Note: this parameter is only relevant for CSV and TSV."
                        },
                        "questionIds": {
                          "type": "array",
                          "description": "Export only specified questions (JSON array of Question IDs e.g. [\"QID1\", \"QID3\", ... , \"QID5\"]).",
                          "items": {
                            "type": "string"
                          }
                        },
                        "embeddedDataIds": {
                          "type": "array",
                          "description": "Export only specified embeddeddata.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "surveyMetadataIds": {
                          "type": "array",
                          "description": "Export only specified survey metadata columns.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "compress": {
                          "type": "boolean",
                          "description": "Export results in an uncompressed format. Note that this is intended for small exports. Large exports may encounter issues downloading large result files. Note it is possible in the future that if an export size is too large uncompressed, that this flag will be ignored and it will be compressed anyway.",
                          "default": true
                        },
                        "exportResponsesInProgress": {
                          "type": "boolean",
                          "description": "Retrieve the responses in progress only.",
                          "default": false
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/surveys/{surveyId}/export-responses"
            }
          },
          "/surveys/{surveyId}/export-responses/{exportProgressId}": {
            "get": {
              "tags": [],
              "summary": "Get Response Export Progress",
              "description": "Retrieve the status of a response export",
              "operationId": "get-response-export-progress-1",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID of export.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "exportProgressId",
                  "in": "path",
                  "description": "Export progress ID returned by the export creation call.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/surveys/{surveyId}/export-responses/{exportProgressId}"
            }
          },
          "/surveys/{surveyId}/export-responses/{fileId}/file": {
            "get": {
              "tags": [],
              "summary": "Get Response Export File",
              "description": "Retrieve the response export file after the export is complete",
              "operationId": "get-response-export-file-1",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "Survey ID of the export.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "fileId",
                  "in": "path",
                  "description": "The ID given to you after running your Export Progress call. Note that unlike the legacy v3 export API, the fileId is different from the exportId provided after export creation.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/surveys/{surveyId}/export-responses/{fileId}/file"
            }
          },
          "": {
            "get": {
              "tags": [],
              "summary": "Start Response Import",
              "description": "",
              "operationId": "start-response-import",
              "parameters": [
                {
                  "name": "Content-Type",
                  "in": "header",
                  "description": "text/csv; charset=UTF-8",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "raw data": {
                          "type": "string",
                          "description": "",
                          "default": "",
                          "format": "json"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "get",
              "_path": ""
            },
            "post": {
              "tags": [],
              "summary": "Email Mailing List",
              "description": "",
              "operationId": "email-mailing-list",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "header": {
                          "properties": {
                            "fromEmail": {
                              "type": "string",
                              "description": ""
                            },
                            "fromName": {
                              "type": "string",
                              "description": ""
                            },
                            "replyToEmail": {
                              "type": "string",
                              "description": ""
                            },
                            "subject": {
                              "type": "string",
                              "description": ""
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "message": {
                          "properties": {
                            "messageText": {
                              "type": "string",
                              "description": ""
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "recipients": {
                          "properties": {
                            "mailingListId": {
                              "type": "string",
                              "description": ""
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "sendDate": {
                          "type": "string",
                          "description": ""
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": ""
            }
          },
          "/surveys/{surveyId}/import-responses": {
            "post": {
              "tags": [],
              "summary": "Start Response Import By URL",
              "description": "Starts an import of a CSV or TSV file that is hosted on a public server",
              "operationId": "start-import-by-url",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "Content-Type",
                  "in": "header",
                  "description": "text/csv; charset=UTF-8",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "format",
                        "fileUrl"
                      ],
                      "properties": {
                        "format": {
                          "type": "string",
                          "description": "Allowed values are `CSV` or `TSV`. See guide before for instructions on how to format csv or tsv file."
                        },
                        "fileUrl": {
                          "type": "string",
                          "description": "e.g.  https://raw.githubusercontent.com/werowe/qualtrics/latest/responses.csv"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/surveys/{surveyId}/import-responses"
            }
          },
          "/surveys/{surveyId}/import-responses/{progressId}": {
            "get": {
              "tags": [],
              "summary": "Get Response Import Progress",
              "description": "Retrieves the status of an import",
              "operationId": "get-import-progress",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "progressId",
                  "in": "path",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/surveys/{surveyId}/import-responses/{progressId}"
            }
          },
          "/responseexports": {
            "post": {
              "tags": [],
              "summary": "Legacy Create Response Export (Deprecated)",
              "description": "Starts an export of a survey's responses. This API is in the process of being deprecated. It will continue to be available; however, for new uses of the API, please see [Create Response Export](ref:create-response-export-new).",
              "operationId": "create-response-export",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "format",
                        "surveyId"
                      ],
                      "properties": {
                        "format": {
                          "type": "string",
                          "description": "csv, csv2013, xml, json, or spss",
                          "default": "csv, csv2013, xml, json, or spss"
                        },
                        "surveyId": {
                          "type": "string",
                          "description": "ID of the survey for which to export responses"
                        },
                        "lastResponseId": {
                          "type": "string",
                          "description": "Export all responses received after the specified response. This parameter will be ignored if you use the startDate parameter."
                        },
                        "startDate": {
                          "type": "string",
                          "description": "Only export responses received after the specified date. See [Dates and Times](doc:dates-and-times) for more information on the date and time format. Using this parameter causes the API to ignore lastResponseId."
                        },
                        "endDate": {
                          "type": "string",
                          "description": "Only exports responses received before the specified date. See [Dates and Times](doc:dates-and-times) for more information on the date and time format."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Maximum number of responses exported",
                          "format": "int32"
                        },
                        "includedQuestionIds": {
                          "type": "array",
                          "description": "Export only specified questions (JSON array of Question IDs e.g. [\"QID1\", \"QID3\", ... , \"QID5\"]). If you would like all of your Embedded Data in your export, you can pass in \"embeddedData\" into the JSON array ([\"embeddedData\"]). You may also specify specific Embedded Data field names to just export those fields.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "useLabels": {
                          "type": "boolean",
                          "description": "Instead of exporting the recode value for the answer choice, export the text of the answer choice. For more information on recode values, see [Recode Values](https://www.qualtrics.com/support/survey-platform/survey-module/question-options/recode-values/)."
                        },
                        "decimalSeparator": {
                          "type": "string",
                          "description": "Decimal separator (Possible values are ,(comma) and .(period))"
                        },
                        "seenUnansweredRecode": {
                          "type": "string",
                          "description": "Recode seen but unanswered questions with this value"
                        },
                        "useLocalTime": {
                          "type": "boolean",
                          "description": "Use local timezone to determine response date values. The timezone is set in the admin user interface. See [Managing Your Account](https://www.qualtrics.com/support/survey-platform/getting-started/managing-your-account/) for more information. If set to **false**, returns time as US Mountain Time (UTC-6:00 or UTC-7:00). Note: when using **spss** format, this parameter is ignored and the response export will use local time."
                        },
                        "additionalData": {
                          "type": "string",
                          "description": "A comma separated value field to request additional data in the export. Supported values: DateRecorded"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/responseexports"
            }
          },
          "/responseexports/{responseExportId}": {
            "get": {
              "tags": [],
              "summary": "Legacy Get Response Export Progress (Deprecated)",
              "description": "Retrieve the status of a response export. This API is in the process of being deprecated. It will continue to be available; however, for new uses of the API, please use [Get Response Export Progress](ref:get-response-export-progress-1) in conjunction with [Create Response Export](ref:create-response-export-new).",
              "operationId": "get-response-export-progress",
              "parameters": [
                {
                  "name": "responseExportId",
                  "in": "path",
                  "description": "ID of the response export.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/responseexports/{responseExportId}"
            }
          },
          "/v:version/responseexports/:responseExportId/file": {
            "get": {
              "tags": [],
              "summary": "Legacy Get Response Export File (Deprecated)",
              "description": "Retrieve the response export file after the export is complete. This API is in the process of being deprecated. It will continue to be available; however, for new uses of the API, please use [Get Response Export File](ref:get-response-export-file-1) in conjunction with [Create Response Export](ref:create-response-export-new).",
              "operationId": "get-response-export-file",
              "parameters": [
                {
                  "name": "responseExportId",
                  "in": "path",
                  "description": "The ID given to you after running your Response Export call, i.e., in this {\"result\":{\"id\":\"ES_joe7s16cjbkfhmi12g0qidmreg\"},\"meta\":{\"httpStatus\":\"200 - OK\",\"requestId\":\"00ce5254-b020-4c11-8420-41e9f385fb6d\"}} it is the second number, 00ce5254-b020-4c11-8420-41e9f385fb6d",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/v:version/responseexports/{responseExportId}/file"
            }
          },
          "/responseimports": {
            "post": {
              "tags": [],
              "summary": "Import Responses From URL (Deprecated)",
              "description": "Import responses for a survey from a URL. This API is in the process of being deprecated. It will continue to be available; however, for new uses of the API, please see [Start Response Import By URL](ref:start-import-by-url).",
              "operationId": "import-responses-from-url",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "surveyId",
                        "contentType",
                        "fileUrl"
                      ],
                      "properties": {
                        "surveyId": {
                          "type": "string",
                          "description": "ID of the survey to import responses into"
                        },
                        "contentType": {
                          "type": "string",
                          "description": "Content type of the file. Only \"text/csv\" is currently supported",
                          "default": "text/csv"
                        },
                        "fileUrl": {
                          "type": "string",
                          "description": "The location of the CSV file containing the responses to be imported, we only support CSV files from ftp, ftps, http, and https"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/responseimports"
            }
          },
          "/responseimports/{importId}": {
            "get": {
              "tags": [],
              "summary": "Get Response Import Progress (Deprecated)",
              "description": "Retrieve the status of an import. This API is in the process of being deprecated. It will continue to be available; however, for new uses of the API, please use [Get Response Import Progress](ref:get-import-progress) in conjunction with either [Start Response Import](ref:start-import) or [Start Response Import By URL](ref:start-import-by-url).",
              "operationId": "get-response-import",
              "parameters": [
                {
                  "name": "importId",
                  "in": "path",
                  "description": "ID of the response import to retrieve",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/responseimports/{importId}"
            }
          },
          "/libraries/{libraryId}/messages": {
            "get": {
              "tags": [],
              "summary": "List Library Messages",
              "description": "Get information on all messages in a library",
              "operationId": "get-library-messages",
              "parameters": [
                {
                  "name": "libraryId",
                  "in": "path",
                  "description": "The Library ID can be one of the following IDs: User ID, Group ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "category",
                  "in": "query",
                  "description": "Category filter. Valid categories include: invite, inactiveSurvey, reminder, thankYou, endOfSurvey, general, lookAndFeel, emailSubject, smsInvite, and validation",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "pageOffset",
                  "in": "query",
                  "description": "The starting offset for the pagination. The default offset is 0. If there are additional pages, the offset value for the next page will be appended to the value of the nextPage parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/libraries/{libraryId}/messages"
            },
            "post": {
              "tags": [],
              "summary": "Create Library Message",
              "description": "Add a new message to a library",
              "operationId": "create-library-message",
              "parameters": [
                {
                  "name": "libraryId",
                  "in": "path",
                  "description": "The Library ID can be one of the following IDs: (User ID, Group ID, ThreeSixty ID)",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "description",
                        "messages",
                        "category"
                      ],
                      "properties": {
                        "description": {
                          "type": "string",
                          "description": "Defines a description for the message"
                        },
                        "messages": {
                          "type": "object",
                          "description": "A JSON object - mapping language codes to messages. (example: {\"en\":\"Example english message.\",\"pt-br\":\"Mensagem em Portugues.\"})",
                          "properties": {}
                        },
                        "category": {
                          "type": "string",
                          "description": "The message can be grouped in the following categories: invite, inactiveSurvey, reminder, thankYou, endOfSurvey, general, validation, lookAndFeel, emailSubject, smsInvite"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/libraries/{libraryId}/messages"
            }
          },
          "/libraries/{libraryId}/messages/{messageId}": {
            "get": {
              "tags": [],
              "summary": "Get Library Message",
              "description": "Gets a message from a library",
              "operationId": "get-library-message",
              "parameters": [
                {
                  "name": "libraryId",
                  "in": "path",
                  "description": "The Library ID can be one of the following IDs: User ID, Group ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "messageId",
                  "in": "path",
                  "description": "Message ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/libraries/{libraryId}/messages/{messageId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Library Message",
              "description": "Updates a library message",
              "operationId": "update-library-message",
              "parameters": [
                {
                  "name": "libraryId",
                  "in": "path",
                  "description": "The Library ID can be one of the following IDs: User ID, Group ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "messageId",
                  "in": "path",
                  "description": "Message ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string",
                          "description": "Defines a description for the message"
                        },
                        "messages": {
                          "type": "string",
                          "description": "A JSON object mapping language codes to messages. Existing languages will be replaced; others will be added"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/libraries/{libraryId}/messages/{messageId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Library Message",
              "description": "Deletes a message from a library",
              "operationId": "delete-library-message",
              "parameters": [
                {
                  "name": "messageId",
                  "in": "path",
                  "description": "Message ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "libraryId",
                  "in": "path",
                  "description": "The Library ID can be one of the following IDs: User ID, Group ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/libraries/{libraryId}/messages/{messageId}"
            }
          },
          "/libraries/{libraryId}/graphics": {
            "post": {
              "tags": [],
              "summary": "Upload Graphic From URL",
              "description": "Upload a new graphic to a library from an external URL",
              "operationId": "upload-graphic-from-url-1",
              "parameters": [
                {
                  "name": "libraryId",
                  "in": "path",
                  "description": "The Library ID can be one of the following IDs: User ID, Group ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "name",
                        "fileUrl",
                        "contentType"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the graphic"
                        },
                        "fileUrl": {
                          "type": "string",
                          "description": "The url that the graphic will be uploaded from."
                        },
                        "contentType": {
                          "type": "string",
                          "description": "The content type of the image being uploaded. (See \"Upload Graphic\" for allowed types)"
                        },
                        "folder": {
                          "type": "string",
                          "description": "The folder where the graphic will be located"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/libraries/{libraryId}/graphics"
            }
          },
          "/libraries/{libraryId}/graphics/{graphicId}": {
            "delete": {
              "tags": [],
              "summary": "Delete Graphic",
              "description": "Deletes a graphic from a library",
              "operationId": "delete-graphic",
              "parameters": [
                {
                  "name": "libraryId",
                  "in": "path",
                  "description": "The Library ID can be one of the following IDs: User ID, Group ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "graphicId",
                  "in": "path",
                  "description": "Graphic ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/libraries/{libraryId}/graphics/{graphicId}"
            }
          },
          "/mailinglists/{mailingListId}": {
            "get": {
              "tags": [],
              "summary": "Get Mailing List",
              "description": "Retrieves metadata for the specified mailing list",
              "operationId": "get-mailing-list",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "Mailing List ID (found [in Qualtrics IDs](#finding-qualtrics-ids))",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/mailinglists/{mailingListId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Mailing List",
              "description": "Updates the specified mailing list",
              "operationId": "update-mailing-list",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "See how Finding Qualtrics IDs [doc](finding-qualtrics-ids#mailing-lists)",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "libraryId": {
                          "type": "string",
                          "description": "New Library ID of the mailing list (found [doc](finding-qualtrics-ids#library-id))"
                        },
                        "name": {
                          "type": "string",
                          "description": "New Mailing List Name"
                        },
                        "category": {
                          "type": "string",
                          "description": "New Mailing List Category"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/mailinglists/{mailingListId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Mailing List",
              "description": "Delete a mailing list",
              "operationId": "delete-mailing-list",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "Mailing List ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/mailinglists/{mailingListId}"
            }
          },
          "/mailinglists": {
            "get": {
              "tags": [],
              "summary": "List Mailing Lists",
              "description": "Get all mailing lists",
              "operationId": "list-mailing-lists",
              "parameters": [
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination. The default offset is 0. If there are additional pages, the offset value for the next page will be appended to the value of the nextPage parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/mailinglists"
            },
            "post": {
              "tags": [],
              "summary": "Create Mailing List",
              "description": "Creates a new mailing list",
              "operationId": "create-mailing-lists",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "libraryId",
                        "name"
                      ],
                      "properties": {
                        "libraryId": {
                          "type": "string",
                          "description": "Library ID"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the new mailing list"
                        },
                        "category": {
                          "type": "string",
                          "description": "Category in which to create the new mailing list"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/mailinglists"
            }
          },
          "/mailinglists/{mailingListId}/contacts": {
            "get": {
              "tags": [],
              "summary": "List Contacts",
              "description": "Retrieves members of the mailing list",
              "operationId": "list-contacts",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "ID of the mailing list from which to get the contacts (found [in Qualtrics IDs](#finding-qualtrics-ids))",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "skipToken",
                  "in": "query",
                  "description": "Returns next 100 contacts after specified RecipientID. If there are additional pages, the skipToken value for the next page will be appended to the value of the nextPage parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/mailinglists/{mailingListId}/contacts"
            },
            "post": {
              "tags": [],
              "summary": "Create Contact",
              "description": "Creates a contact in the specified mailing list",
              "operationId": "create-recipient-contact",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "ID of the mailing list in which to create the contact (found [in Qualtrics IDs](#finding-qualtrics-ids))",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string",
                          "description": "Contact first name"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Contact last name"
                        },
                        "email": {
                          "type": "string",
                          "description": "Contact email"
                        },
                        "externalDataRef": {
                          "type": "string",
                          "description": "External data reference"
                        },
                        "language": {
                          "type": "string",
                          "description": "The [language code](/docs/language-codes) for the contact"
                        },
                        "unsubscribed": {
                          "type": "boolean",
                          "description": "Contact's opt-out state within the mailing list"
                        },
                        "embeddedData": {
                          "type": "object",
                          "description": "Embedded data values, a string representation of a JSON object",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/mailinglists/{mailingListId}/contacts"
            }
          },
          "/mailinglists/{mailingListId}/contacts/{contactId}": {
            "get": {
              "tags": [],
              "summary": "Get Contact",
              "description": "Retrieve information for an individual contact",
              "operationId": "get-contact",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "ID of the mailing list to which specified contact belongs (found [in Qualtrics IDs](doc:parameters#finding-qualtrics-ids))",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contactId",
                  "in": "path",
                  "description": "ID for the desired contact",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/mailinglists/{mailingListId}/contacts/{contactId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Contact",
              "description": "Updates the specified mailing list contact",
              "operationId": "update-contact",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "ID of the mailing list to which specified contact belongs (found [in Qualtrics IDs](#finding-qualtrics-ids))",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contactId",
                  "in": "path",
                  "description": "Mailing List Contact ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string",
                          "description": "New First Name"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "New Last Name"
                        },
                        "email": {
                          "type": "string",
                          "description": "New Email"
                        },
                        "externalDataReference": {
                          "type": "string",
                          "description": "External data reference"
                        },
                        "language": {
                          "type": "string",
                          "description": "Language Code"
                        },
                        "unsubscribed": {
                          "type": "boolean",
                          "description": "Opt-out the contact from the mailinglist"
                        },
                        "embeddedData": {
                          "type": "object",
                          "description": "Embedded Data Values",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/mailinglists/{mailingListId}/contacts/{contactId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Contact",
              "description": "Delete a mailing list contact",
              "operationId": "delete-contact",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "Mailing List ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contactId",
                  "in": "path",
                  "description": "Contact ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/mailinglists/{mailingListId}/contacts/{contactId}"
            }
          },
          "/mailinglists/{mailingListId}/contactimports": {
            "post": {
              "tags": [],
              "summary": "Create Contacts Import From URL",
              "description": "Imports contacts into a mailing list",
              "operationId": "create-contacts-import-from-url",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "ID of the mailingList into which contacts will be imported (found <a href=\"https://www.qualtrics.com/support/integrations/api-integration/finding-qualtrics-ids/\" target=\"_blank\">in Qualtrics IDs</a> )",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "contentType"
                      ],
                      "properties": {
                        "contentType": {
                          "type": "string",
                          "description": "Content type of the file. Only \"application/json\" is currently supported"
                        },
                        "fileUrl": {
                          "type": "string",
                          "description": "The location of the file containing the contacts to be imported. We only support JSON files from ftp, http, and https"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/mailinglists/{mailingListId}/contactimports"
            }
          },
          "/mailinglists/{mailingListId}/contactimports/{importId}": {
            "get": {
              "tags": [],
              "summary": "Get Contacts Import Progress",
              "description": "",
              "operationId": "get-contacts-import",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "ID of the mailingList into which contacts are being imported (found [in Qualtrics IDs](#finding-qualtrics-ids))",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "importId",
                  "in": "path",
                  "description": "ID of the import created earlier",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/mailinglists/{mailingListId}/contactimports/{importId}"
            }
          },
          "/mailinglists/{mailingListId}/contactimports/{importId}/summary": {
            "get": {
              "tags": [],
              "summary": "Get Contacts Import Progress Summary",
              "description": "",
              "operationId": "get-contacts-import-progress-summary",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "ID of the mailingList into which contacts are being imported (found [in Qualtrics IDs](#finding-qualtrics-ids))",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "importId",
                  "in": "path",
                  "description": "ID of the import created earlier",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/mailinglists/{mailingListId}/contactimports/{importId}/summary"
            }
          },
          "/mailinglists/{mailingListId}/samples": {
            "get": {
              "tags": [],
              "summary": "List Samples",
              "description": "Get all samples for a mailing list",
              "operationId": "get-samples",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "Mailing List ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/mailinglists/{mailingListId}/samples"
            }
          },
          "/mailinglists/{mailingListId}/samples/{sampleId}": {
            "get": {
              "tags": [],
              "summary": "Get Sample",
              "description": "Get a mailing list sample",
              "operationId": "get-sample",
              "parameters": [
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "Mailing List ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sampleId",
                  "in": "path",
                  "description": "Sample ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/mailinglists/{mailingListId}/samples/{sampleId}"
            }
          },
          "/eventsubscriptions": {
            "get": {
              "tags": [],
              "summary": "List Subscriptions",
              "description": "Get all event subscriptions",
              "operationId": "get-subscriptions",
              "parameters": [
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination. The default offset is 0. If there are additional pages, the offset value for the next page will be appended to the value of the nextPage parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/eventsubscriptions"
            },
            "post": {
              "tags": [],
              "summary": "Create Subscription",
              "description": "Add an event subscription",
              "operationId": "create-subscription",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "publicationUrl",
                        "topics"
                      ],
                      "properties": {
                        "publicationUrl": {
                          "type": "string",
                          "description": "The fully qualified URL to publish events to. The web server URL must be able to handle HTTP POST. It will be receiving x-www-form-urlencoded data not JSON."
                        },
                        "topics": {
                          "type": "string",
                          "description": "String Value of topics to subscribe to. ’threesixty.*’ will subscribe to all 360 events from Qualtrics. [More Info](/docs/events)"
                        },
                        "encrypt": {
                          "type": "boolean",
                          "description": "If true, will encrypt the event messages using the supplied Shared Key. Encryption will be AES 128 or 256 depending on Shared Key length (16 bytes = 128 bit, 32 bytes = 256 bit). Encryption is not necessary if publishing to an https URL. *\tEncrypted MSG is Base64 encoded for transport purposes, therefore you must base64 decode the MSG before decrypting it. MSG plaintext will be in JSON format.",
                          "default": false
                        },
                        "sharedKey": {
                          "type": "string",
                          "description": "If specified, all event messages will be emitted with an HMAC using this key to guarantee message authenticity, and optionally encrypted using this key (if encrypt = true)."
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/eventsubscriptions"
            }
          },
          "/eventsubscriptions/{subscriptionId}": {
            "get": {
              "tags": [],
              "summary": "Get Subscription",
              "description": "Get an event subscription",
              "operationId": "get-subscription",
              "parameters": [
                {
                  "name": "subscriptionId",
                  "in": "path",
                  "description": "Subscription ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/eventsubscriptions/{subscriptionId}"
            }
          },
          "/directories/{directoryId}/contacts": {
            "get": {
              "tags": [],
              "summary": "List Directory Contacts",
              "description": "Retrieve the contacts in a directory, default pagination size is 100.",
              "operationId": "list-directory-contacts",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "Optional pagination size to determine how many contacts are returned in a single request. Default: **100**, Minimum: **1**, Maximum: **500**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "100"
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination (Deprecated starting March 1, 2019). The default offset is 0 (i.e. start from the beginning of the directory). If there are additional pages, the offset value for the next page will be appended to the value of the **nextPage** parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "0"
                  }
                },
                {
                  "name": "skipToken",
                  "in": "query",
                  "description": "The starting offset for the pagination (will be used starting March 1, 2019). The default offset starts from the beginning of the directory. If there are additional pages, the offset value for the next page will be appended to the value of the **nextPage** parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/contacts"
            },
            "post": {
              "tags": [],
              "summary": "Create Directory Contact",
              "description": "Create a single contact in a specified directory",
              "operationId": "create-directory-contact",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string",
                          "description": "Contact's first name"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Contact's last name"
                        },
                        "email": {
                          "type": "string",
                          "description": "Contact's email address"
                        },
                        "phone": {
                          "type": "string",
                          "description": "Contact's phone number"
                        },
                        "embeddedData": {
                          "type": "string",
                          "description": "JSON object representing the embedded data fields to set for the contact"
                        },
                        "language": {
                          "type": "string",
                          "description": "The contact's [language code](/docs/language-codes)."
                        },
                        "extRef": {
                          "type": "string",
                          "description": "The external reference for the contact"
                        },
                        "unsubscribed": {
                          "type": "boolean",
                          "description": "The contact's subscription status, defaults to **false** if not included",
                          "default": false
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/directories/{directoryId}/contacts"
            }
          },
          "/directories/{directoryId}/contacts/{contactId}": {
            "get": {
              "tags": [],
              "summary": "Get Directory Contact",
              "description": "Retrieve a single contact from a directory",
              "operationId": "get-directory-contact",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contactId",
                  "in": "path",
                  "description": "The ID for the desired contact",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/contacts/{contactId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Directory Contact",
              "description": "Update a single contact in a specified directory",
              "operationId": "update-directory-contact",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contactId",
                  "in": "path",
                  "description": "The ID for the desired contact",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string",
                          "description": "Contact's first name"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Contact's last name"
                        },
                        "email": {
                          "type": "string",
                          "description": "Contact's email address"
                        },
                        "phone": {
                          "type": "string",
                          "description": "Contact's phone number"
                        },
                        "embeddedData": {
                          "type": "object",
                          "description": "JSON object representing the embedded data fields to set for the contact",
                          "properties": {}
                        },
                        "language": {
                          "type": "string",
                          "description": "The [language code](/docs/language-codes) to be used for the users account"
                        },
                        "extRef": {
                          "type": "string",
                          "description": "The external reference for the contact"
                        },
                        "unsubscribed": {
                          "type": "boolean",
                          "description": "The contact's subscription status"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/directories/{directoryId}/contacts/{contactId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Directory Contact",
              "description": "Delete a single contact from a directory",
              "operationId": "delete-directory-contact",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contactId",
                  "in": "path",
                  "description": "The ID for the desired contact",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/directories/{directoryId}/contacts/{contactId}"
            }
          },
          "/directories/{directoryId}/contacts/{contactId}/history": {
            "get": {
              "tags": [],
              "summary": "Get Contact History",
              "description": "Retrieve the history for contacts in a directory, default pagination size is 100.",
              "operationId": "get-contact-history",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contactId",
                  "in": "path",
                  "description": "The ID for the desired contact",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "type",
                  "in": "query",
                  "description": "The desired history type; one of two values: _email_ and _response_",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "Optional pagination size to determine how many contacts are returned in a single request. Default: **100**, Minimum: **1**, Maximum: **1000**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "100"
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination. The default offset is 0 (i.e. start from the beginning of the directory). If there are additional pages, the offset value for the next page will be appended to the value of the **nextPage** parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "0"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/contacts/{contactId}/history"
            }
          },
          "/directories/{directoryId}/contacts/search": {
            "post": {
              "tags": [],
              "summary": "Search Contacts",
              "description": "Retrieve contacts that satisfy conditions you have specified.",
              "operationId": "directory-contacts-search",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as the pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your API token",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "skipToken",
                  "in": "query",
                  "description": "Optional field which indicate the starting point for the next round of search. The default value is null, i.e. start from the beginning of the directory. If there are additional pages after one request, the skipToken will be added in response.",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "default": "null"
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "Optional page size to determine how many contacts are returned in a single request. The default value is 100, but it can be adjusted from 1 to 100. If you provided a value that violates the minimum or maximum limit, the pageSize will be set to 100.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "100"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "filter": {
                          "type": "object",
                          "description": "A JSON object that specifies basic filtering criteria. Refer to the documentation below to see how the value for this key is constructed.",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/directories/{directoryId}/contacts/search"
            }
          },
          "/directories/{directoryId}/mailinglists": {
            "get": {
              "tags": [],
              "summary": "List Mailing Lists",
              "description": "Retrieve the mailing lists in an XM Directory, default pagination size is 100.",
              "operationId": "list-mailing-lists-1",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "Optional pagination size to determine how many mailinglists are returned in a single request. Default: **100**, Minimum: **1**, Maximum: **10000**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "100"
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination (will be deprecated starting March 1, 2019). The default offset is 0 (i.e. start from the beginning of the directory). If there are additional pages, the offset value for the next page will be appended to the value of the **nextPage** parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "0"
                  }
                },
                {
                  "name": "skipToken",
                  "in": "query",
                  "description": "The starting offset for the pagination (will be used starting March 1, 2019). The default offset starts from the beginning of the directory. If there are additional pages, the offset value for the next page will be appended to the value of the **nextPage** parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "ownerId",
                  "in": "query",
                  "description": "To query for shared mailing lists available to the user, set ownerID to a user-groupId such as GR_FJDKAXL.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/mailinglists"
            },
            "post": {
              "tags": [],
              "summary": "Create Mailing List",
              "description": "Create a single mailing list in a specified XM Directory directory",
              "operationId": "create-directory-mailinglists",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name for the mailing list."
                        },
                        "ownerId": {
                          "type": "string",
                          "description": "A user-group ID may be included here in order to the put the mailing list in a shared library."
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/directories/{directoryId}/mailinglists"
            }
          },
          "/directories/{directoryId}/mailinglists/{mailingListId}": {
            "get": {
              "tags": [],
              "summary": "Get Mailing List",
              "description": "Retrieve a single mailing list from an XM Directory directory",
              "operationId": "get-directory-mailinglist",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "The ID for the desired mailing list.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/mailinglists/{mailingListId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Mailing List",
              "description": "Update a single mailing list in a specified XM Directory directory",
              "operationId": "update-directory-mailinglist",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "The ID for the desired mailing list",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name for the mailing list."
                        },
                        "ownerId": {
                          "type": "string",
                          "description": "A user-group ID may be included here in order to the put the mailing list in a shared library."
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/directories/{directoryId}/mailinglists/{mailingListId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete XM Directory Mailing List",
              "description": "Delete a single mailing list from an XM Directory directory",
              "operationId": "delete-directory-mailinglist",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailinglistId",
                  "in": "path",
                  "description": "The ID for the desired mailing list",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/directories/{directoryId}/mailinglists/{mailingListId}"
            }
          },
          "/directories/{directoryId}/mailinglists/{mailinglistId}/contacts": {
            "get": {
              "tags": [],
              "summary": "List Contacts In Mailing List",
              "description": "Gets all contacts in a specified mailing list",
              "operationId": "list-contacts-in-mailing-list",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailinglistId",
                  "in": "path",
                  "description": "The ID for the desired mailing list",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "Optional pagination size to determine how many contacts are returned in a single request. Default: **100**, Minimum: **1**, Maximum: **10000**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "100"
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination (Will be deprecated starting March 1, 2019). The default offset is 0 (i.e. start from the beginning of the mailing list). If there are additional pages, the offset value for the next page will be appended to the value of the **nextPage** parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "0"
                  }
                },
                {
                  "name": "skipToken",
                  "in": "query",
                  "description": "The starting offset for the pagination (will be used starting March 1, 2019). The default offset starts from the beginning of the directory. If there are additional pages, the offset value for the next page will be appended to the value of the **nextPage** parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/mailinglists/{mailinglistId}/contacts"
            },
            "post": {
              "tags": [],
              "summary": "Create Contact In Mailing List",
              "description": "Create a contact in a specified mailing list",
              "operationId": "create-contact-in-mailinglist",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailinglistId",
                  "in": "path",
                  "description": "The ID for the desired mailing list",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string",
                          "description": "Contact's first name"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Contact's last name"
                        },
                        "email": {
                          "type": "string",
                          "description": "Contact's email address.  Must be in proper email format."
                        },
                        "phone": {
                          "type": "string",
                          "description": "Contact's phone number"
                        },
                        "embeddedData": {
                          "type": "object",
                          "description": "JSON object representing the embedded data fields to set for the contact",
                          "properties": {}
                        },
                        "language": {
                          "type": "string",
                          "description": "The [language code](/docs/language-codes) to be used for the users account"
                        },
                        "extRef": {
                          "type": "string",
                          "description": "The external reference for the contact"
                        },
                        "unsubscribed": {
                          "type": "boolean",
                          "description": "The contact's subscription status to this mailing list. If set to **true**, will opt the contact out of distributions for this mailing list. Defaults to **false** if not included.",
                          "default": false
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/directories/{directoryId}/mailinglists/{mailinglistId}/contacts"
            }
          },
          "/directories/{directoryId}/mailinglists/{mailinglistId}/contacts/{contactId}": {
            "get": {
              "tags": [],
              "summary": "Get Contact In Mailing List",
              "description": "Retrieve a specified contact within a mailing list",
              "operationId": "get-contact-in-mailing-list",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailinglistId",
                  "in": "path",
                  "description": "The ID for the desired mailing list",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contactId",
                  "in": "path",
                  "description": "The ID for the desired contact",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/mailinglists/{mailinglistId}/contacts/{contactId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Contact in Mailing List",
              "description": "Delete a single contact from a mailing list",
              "operationId": "delete-contact-in-mailing-list",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailinglistId",
                  "in": "path",
                  "description": "The ID for the desired mailing list",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contactId",
                  "in": "path",
                  "description": "The ID for the desired contact",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/directories/{directoryId}/mailinglists/{mailinglistId}/contacts/{contactId}"
            }
          },
          "/directories/{directoryId}/mailinglists/{mailinglistId}/contacts/{contactId}/history": {
            "get": {
              "tags": [],
              "summary": "Get Contact History In Mailing List",
              "description": "Retrieve the history for contacts in a mailing list, default pagination size is 100.",
              "operationId": "get-contact-history-in-mailing-list",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailinglistId",
                  "in": "path",
                  "description": "The ID for the desired mailing list",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contactId",
                  "in": "path",
                  "description": "The ID for the desired contact",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "type",
                  "in": "query",
                  "description": "The desired history type; one of two values: _email_ and _response_",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "Optional pagination size to determine how many contacts are returned in a single request. Default: **100**, Minimum: **1**, Maximum: **1000**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "100"
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination. The default offset is 0 (i.e. start from the beginning of the directory). If there are additional pages, the offset value for the next page will be appended to the value of the **nextPage** parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "0"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/mailinglists/{mailinglistId}/contacts/{contactId}/history"
            }
          },
          "/directories/{directoryId}/mailinglists/{mailinglistId}/contacts/:contactId": {
            "put": {
              "tags": [],
              "summary": "Update Contact in Mailing List",
              "description": "Update a single contact in a mailing list",
              "operationId": "update-contact-in-mailing-list",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailinglistId",
                  "in": "path",
                  "description": "The ID for the desired mailing list",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contactId",
                  "in": "path",
                  "description": "The ID for the desired contact",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string",
                          "description": "Contact's first name"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Contact's last name"
                        },
                        "email": {
                          "type": "string",
                          "description": "Contact's email address.  Must be in proper email format."
                        },
                        "phone": {
                          "type": "string",
                          "description": "Contact's phone number"
                        },
                        "embeddedData": {
                          "type": "object",
                          "description": "JSON object representing the embedded data fields to set for the contact",
                          "properties": {}
                        },
                        "language": {
                          "type": "string",
                          "description": "The [language code](/docs/language-codes) to be used for the users account"
                        },
                        "extRef": {
                          "type": "string",
                          "description": "The external reference for the contact"
                        },
                        "unsubscribed": {
                          "type": "boolean",
                          "description": "The contact's subscription status"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/directories/{directoryId}/mailinglists/{mailinglistId}/contacts/{contactId}"
            }
          },
          "/directories/{directoryId}/samples": {
            "get": {
              "tags": [],
              "summary": "List Samples",
              "description": "Get all samples in a directory.",
              "operationId": "list-samples",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "Optional pagination size to determine how many sample definitions are returned in a single request. Default: **100**, Minimum: **1**, Maximum: **100**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "100"
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination. The default offset is blank (i.e. start from the beginning of the directory). If there are additional pages, the offset value for the next page will be appended to the value of the **nextPage** parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your api token.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/samples"
            },
            "post": {
              "tags": [],
              "summary": "Perform Sample on MailingList/Batch",
              "description": "Creates a mailing list subset (sample) or batch subset in a directory based off of an existing sample definition.",
              "operationId": "create-sample",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "Content-Type",
                  "in": "header",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "default": "application/json"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your api token.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "sampleDefinitionId",
                        "parentId"
                      ],
                      "properties": {
                        "sampleDefinitionId": {
                          "type": "string",
                          "description": "The sample definition containing sampleCriteria and maxSampleSize"
                        },
                        "parentId": {
                          "type": "string",
                          "description": "Either a mailing list ID or a batch ID. The sampleId returned will be of the same type."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the sample."
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the sample."
                        },
                        "category": {
                          "type": "string",
                          "description": "A user-defined category for the sample."
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/directories/{directoryId}/samples"
            }
          },
          "/directories/{directoryId}/samples/{sampleId}": {
            "get": {
              "tags": [],
              "summary": "Get Sample",
              "description": "Retrieve a sample's metadata.",
              "operationId": "get-sample-1",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sampleid",
                  "in": "path",
                  "description": "The ID of the sample you want to get metadata for.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "X-API-TOKEN"
                      ],
                      "properties": {
                        "X-API-TOKEN": {
                          "type": "string",
                          "description": "Your api token."
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/samples/{sampleId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Sample",
              "description": "Update a sample's metadata.",
              "operationId": "update-sample",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sampleId",
                  "in": "path",
                  "description": "The ID of the sample that you want to modify.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your api token.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "Content-Type",
                  "in": "header",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "default": "application/json"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the sample."
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the sample."
                        },
                        "category": {
                          "type": "string",
                          "description": "A user-defined category for the sample."
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/directories/{directoryId}/samples/{sampleId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Sample",
              "description": "Deletes a sample from a directory.",
              "operationId": "delete-sample",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sampleId",
                  "in": "path",
                  "description": "The ID of the sample that you want to delete.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your api token.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/directories/{directoryId}/samples/{sampleId}"
            }
          },
          "/directories/{directoryId}/samples/{sampleId}/contacts": {
            "get": {
              "tags": [],
              "summary": "Get Sample Contacts",
              "description": "Retrieves a paginated list of contacts in a sample.",
              "operationId": "get-sample-contacts",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sampleId",
                  "in": "path",
                  "description": "The ID of the sample containing the contacts you want to get.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your api token.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/samples/{sampleId}/contacts"
            }
          },
          "/directories/{directoryId}/samples/progress/{progressId}": {
            "get": {
              "tags": [],
              "summary": "Get Create Sample Progress",
              "description": "Get completion percentage for a sample-creation job.",
              "operationId": "get-create-sample-progress",
              "parameters": [
                {
                  "name": "progressId",
                  "in": "path",
                  "description": "The progress ID returned from the Create Sample call.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your api token.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The ID of the directory, also known as the poolID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/samples/progress/{progressId}"
            }
          },
          "/directories/{directoryId}/samples/definitions": {
            "get": {
              "tags": [],
              "summary": "List Sample Definitions",
              "description": "Retrieve a paginated list of sample definitions in a directory.",
              "operationId": "list-sample-definitions",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "Optional pagination size to determine how many sample definitions are returned in a single request. Default: **10**, Minimum: **1**, Maximum: **10**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "10"
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination. The default offset is blank (i.e. start from the beginning of the directory). If there are additional pages, the offset value for the next page will be appended to the value of the **nextPage** parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your api token.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/samples/definitions"
            },
            "post": {
              "tags": [],
              "summary": "Create Sample Definition",
              "description": "Create a sample definition.",
              "operationId": "create-sample-definition",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "the directory ID, also known as a pool ID.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "Content-Type",
                  "in": "header",
                  "description": "",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "default": "application/json"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your api token.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "sampleCriteria",
                        "maxSampleSize"
                      ],
                      "properties": {
                        "sampleCriteria": {
                          "type": "object",
                          "description": "The search logic used to build a sample, see below.",
                          "properties": {}
                        },
                        "maxSampleSize": {
                          "type": "integer",
                          "description": "The maximum size of any sample generated from this definition.",
                          "format": "int32"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/directories/{directoryId}/samples/definitions"
            }
          },
          "/directories/{directoryId}/samples/definitions/{sampleDefinitionId}": {
            "get": {
              "tags": [],
              "summary": "Get Sample Definition",
              "description": "Retrieve a sample definition from a directory.",
              "operationId": "get-sample-definition",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sampleDefinitionId",
                  "in": "path",
                  "description": "The ID of the sample definition that is desired",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your api token.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/samples/definitions/{sampleDefinitionId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Sample Definition",
              "description": "Update a sample definition. Modifying a definition will not trigger modifications of samples generated from previous versions.",
              "operationId": "update-sample-definition",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sampleDefinitionId",
                  "in": "path",
                  "description": "The ID of the sample definition that you want to modify.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your api token.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "Content-Type",
                  "in": "header",
                  "description": "",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "default": "application/json"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "sampleCriteria",
                        "maxSampleSize"
                      ],
                      "properties": {
                        "sampleCriteria": {
                          "type": "object",
                          "description": "The search logic used to build a sample, see \"Create Sample Definition\".",
                          "properties": {}
                        },
                        "maxSampleSize": {
                          "type": "integer",
                          "description": "The maximum size of any sample generated from this definition.",
                          "format": "int32"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/directories/{directoryId}/samples/definitions/{sampleDefinitionId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Sample Definition",
              "description": "Delete a sample definition from a directory.",
              "operationId": "delete-sample-definition",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sampleDefinitionId",
                  "in": "path",
                  "description": "The ID of the sample definition that you want to delete.",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your api token.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/directories/{directoryId}/samples/definitions/{sampleDefinitionId}"
            }
          },
          "/directories/{directoryId}/contacts/{contactId}/transactions": {
            "get": {
              "tags": [],
              "summary": "List Contact Transactions",
              "description": "Page through all the transactions for the specified contact",
              "operationId": "get-contact-transactions",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contactId",
                  "in": "path",
                  "description": "The ID of the contact for which transactions will be retrieved",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "withData",
                  "in": "query",
                  "description": "Specifies if the **data** object is returned for each transaction",
                  "required": false,
                  "schema": {
                    "type": "boolean",
                    "default": false
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "Specifies how many transactions to list per page; the minimum is **1**, the maximum is **200**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "200"
                  }
                },
                {
                  "name": "skipToken",
                  "in": "query",
                  "description": "A value that determines the starting point for the next page of transactions",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/contacts/{contactId}/transactions"
            }
          },
          "/directories/{directoryId}/transactions/{transactionId}": {
            "get": {
              "tags": [],
              "summary": "Get Contact Transaction",
              "description": "Retrieve information about a specific transaction. A transaction is additional data that can be embedded into  user's contact.  For example, it could be an actual transaction, like a sales from your sales order system, or information on the customer from Salesforce.",
              "operationId": "get-contact-transaction",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "transactionId",
                  "in": "path",
                  "description": "Transaction ID.  Transactions are extra, custom data you can embed into a contact's information.  You can use these in surveys.  For more information look here  https://api.qualtrics.com/docs/using-transactions-in-target-audience",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/transactions/{transactionId}"
            },
            "post": {
              "tags": [],
              "summary": "Append Contact Transaction",
              "description": "Append information to a transaction",
              "operationId": "append-contact-transaction-data",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "transactionId",
                  "in": "path",
                  "description": "The ID of the transaction for which the information will be revised",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "data"
                      ],
                      "properties": {
                        "data": {
                          "type": "object",
                          "description": "The request body consists of one data object (please refer to the documentation below to understand how this object is constructed)",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/directories/{directoryId}/transactions/{transactionId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Contact Transaction",
              "description": "Revise information about a specific transaction",
              "operationId": "update-contact-transaction",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "transactionId",
                  "in": "path",
                  "description": "The ID of the transaction for which the information will be revised",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "updatedTransaction"
                      ],
                      "properties": {
                        "updatedTransaction": {
                          "type": "object",
                          "description": "The request body consists of one **updatedTransaction** object (please refer to the documentation below to understand how this object is constructed)",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/directories/{directoryId}/transactions/{transactionId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Contact Transaction",
              "description": "Delete a specific transaction",
              "operationId": "delete-contact-transaction",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "transactionId",
                  "in": "path",
                  "description": "The ID of the transaction to be deleted",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/directories/{directoryId}/transactions/{transactionId}"
            }
          },
          "/directories/{directoryId}/transactions": {
            "post": {
              "tags": [],
              "summary": "Create Contact Transactions",
              "description": "Create transactions for multiple contacts across multiple mailing lists with customized data",
              "operationId": "create-contact-transactions",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "transactionId"
                      ],
                      "properties": {
                        "transactionId": {
                          "type": "object",
                          "description": "This is not the field name since it is not a JSON key.  So the value put there becomes the key.",
                          "properties": {}
                        },
                        "mailingListId": {
                          "type": "string",
                          "description": "mailing list ID"
                        },
                        "transactionDate": {
                          "type": "string",
                          "description": "transaction date in UTC format.  If not given then uses current date and time.  See curl example for format."
                        },
                        "data": {
                          "type": "string",
                          "description": "free-form JSON.  So you can make up fields here to use in the survey display logic, etc.  This is not a JSON array.",
                          "default": "",
                          "format": "json"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/directories/{directoryId}/transactions"
            }
          },
          "/directories/{directoryId}/transactionbatches": {
            "get": {
              "tags": [],
              "summary": "Get Transaction Batches in a Directory",
              "description": "Page through all the transaction batches in the specified directory.  See the definition of transactions below.",
              "operationId": "get-transaction-batches-in-a-directory",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID. Here is information on how to get your Pool ID.  https://api.qualtrics.com/docs/finding-qualtrics-ids",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "Specifies how many transaction batches to list per page, the minimum is **1**, the maximum is **200**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "200"
                  }
                },
                {
                  "name": "skipToken",
                  "in": "query",
                  "description": "A value that determines the starting point for the next page of transaction batches",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/transactionbatches"
            },
            "post": {
              "tags": [],
              "summary": "Create Transaction Batch",
              "description": "Create a batch, a collection of transactions",
              "operationId": "create-transaction-batch",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "transactionIds": {
                          "type": "array",
                          "description": "A JSON array that contains the transactions to include in the batch",
                          "items": {
                            "type": "string"
                          }
                        },
                        "creationDate": {
                          "type": "string",
                          "description": "The date formatted as **yyyy-MM-dd HH:mm:ss**. Please see the warning below regarding this parameter.",
                          "default": "(current UTC time if not specified)"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/directories/{directoryId}/transactionbatches"
            }
          },
          "/directories/{directoryId}/transactionbatches/{batchId}/transactions": {
            "get": {
              "tags": [],
              "summary": "Get Transactions in a Batch",
              "description": "Page through all the transactions in the specified batch",
              "operationId": "get-transactions-in-a-batch",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "Specifies how many transactions to list per page, the minimum is **1**, the maximum is **200**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "200"
                  }
                },
                {
                  "name": "skipToken",
                  "in": "query",
                  "description": "A value that determines the starting point for the next page of transactions",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "batchId",
                  "in": "path",
                  "description": "The ID that specifies the batch for which transactions will be retrieved",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "withDetails",
                  "in": "query",
                  "description": "Specifies if the **data** object, **transactionDate**, and **mailingListId** are returned for each transaction",
                  "required": false,
                  "schema": {
                    "type": "boolean",
                    "default": false
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/transactionbatches/{batchId}/transactions"
            },
            "post": {
              "tags": [],
              "summary": "Add Transactions to a Batch",
              "description": "Add transactions to the specified batch",
              "operationId": "add-transactions-to-a-batch",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "batchId",
                  "in": "path",
                  "description": "The ID that specifies the batch for which the specified transactions will be added to",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "transactionIds"
                      ],
                      "properties": {
                        "transactionIds": {
                          "type": "array",
                          "description": "The request body consists of one or more (limit of 100) transactions listed in a JSON array keyed under **transactionIds**.",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/directories/{directoryId}/transactionbatches/{batchId}/transactions"
            }
          },
          "/directories/{directoryId}/transactionbatches/{batchId}": {
            "get": {
              "tags": [],
              "summary": "Get Transaction Batch",
              "description": "Retrieve metadata about a batch",
              "operationId": "get-transaction-batch",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "batchId",
                  "in": "path",
                  "description": "The ID of the transaction batch that metadata is desired for",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/transactionbatches/{batchId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Transaction Batch",
              "description": "Delete the specified batch",
              "operationId": "delete-transaction-batch",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "batchId",
                  "in": "path",
                  "description": "The ID of the transaction batch that will be deleted",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/directories/{directoryId}/transactionbatches/{batchId}"
            }
          },
          "/directories/{directoryId}/transactionbatches/{batchId}/transactions/{transactionId}": {
            "delete": {
              "tags": [],
              "summary": "Remove Transaction from a Batch",
              "description": "Remove a transaction from the specified batch",
              "operationId": "remove-transaction-from-a-batch",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "batchId",
                  "in": "path",
                  "description": "The ID that specifies the batch from which a transaction will be deleted",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "transactionId",
                  "in": "path",
                  "description": "The ID that specifies the transaction to remove from the batch",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/directories/{directoryId}/transactionbatches/{batchId}/transactions/{transactionId}"
            }
          },
          "/distributions": {
            "post": {
              "tags": [],
              "summary": "Transaction Batch Distribution Create",
              "description": "",
              "operationId": "transaction-batch-distribution-create",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "surveyLink": {
                          "properties": {
                            "surveyId": {
                              "type": "string",
                              "description": "survey ID"
                            },
                            "expirationDate": {
                              "type": "string",
                              "description": "expiry date"
                            },
                            "type": {
                              "type": "string",
                              "description": "Individual, Multiple, or Anonymous"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "header": {
                          "properties": {
                            "fromEmail": {
                              "type": "string",
                              "description": "from email"
                            },
                            "fromName": {
                              "type": "string",
                              "description": "email from name"
                            },
                            "replyToEmail": {
                              "type": "string",
                              "description": "reply to email"
                            },
                            "subject": {
                              "type": "string",
                              "description": "email subject"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "message": {
                          "properties": {
                            "libraryId": {
                              "type": "string",
                              "description": "message library"
                            },
                            "messageId": {
                              "type": "string",
                              "description": "message Id"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "recipients": {
                          "properties": {
                            "transactionBatchId": {
                              "type": "string",
                              "description": "transaction batch ID"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "sendDate": {
                          "type": "string",
                          "description": "send date"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/distributions"
            },
            "get": {
              "tags": [],
              "summary": "List Distributions",
              "description": "Get all distributions",
              "operationId": "get-distributions",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "query",
                  "description": "The survey ID associated with the distributions",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailingListId",
                  "in": "query",
                  "description": "The mailing list or contact group associated with the distribution(s)",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "distributionRequestType",
                  "in": "query",
                  "description": "Specify the type of distribution. Possible values are: Invite, ThankYou, Reminder, Email, Portal, PortalInvite, GeneratedInvite",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sendStartDate",
                  "in": "query",
                  "description": "Starting range on the distribution send date. See [Dates and Times](doc:dates-and-times) for more information on the date and time format.",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "format": "date"
                  }
                },
                {
                  "name": "sendEndDate",
                  "in": "query",
                  "description": "Ending range on the distribution send date. See [Dates and Times](doc:dates-and-times) for more information on the date and time format.",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "format": "date"
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination. The default offset is 0. If there are additional pages, the offset value for the next page will be appended to the value of the nextPage parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/distributions"
            }
          },
          "/distributions/{distributionId}": {
            "get": {
              "tags": [],
              "summary": "Get Distribution",
              "description": "Gets a distribution",
              "operationId": "get-distribution",
              "parameters": [
                {
                  "name": "distributionId",
                  "in": "path",
                  "description": "Distribution ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "surveyId",
                  "in": "query",
                  "description": "The survey ID associated with the distribution",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/distributions/{distributionId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Distribution",
              "description": "Deletes a distribution",
              "operationId": "delete-distribution",
              "parameters": [
                {
                  "name": "distributionId",
                  "in": "path",
                  "description": "The Distribution ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/distributions/{distributionId}"
            }
          },
          "/distributions/{parentDistributionId}/reminders": {
            "post": {
              "tags": [],
              "summary": "Create Reminder Distribution",
              "description": "",
              "operationId": "create-reminder-distribution",
              "parameters": [
                {
                  "name": "parentDistributionId",
                  "in": "path",
                  "description": "Parent Distibution ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "sendDate"
                      ],
                      "properties": {
                        "sendDate": {
                          "type": "string",
                          "description": "Time to send the distribution",
                          "format": "date"
                        },
                        "header": {
                          "properties": {
                            "fromEmail": {
                              "type": "string",
                              "description": "Email from address"
                            },
                            "fromName": {
                              "type": "string",
                              "description": "Email from name"
                            },
                            "replyToEmail": {
                              "type": "string",
                              "description": "Email reply-to address"
                            },
                            "subject": {
                              "type": "string",
                              "description": "Email subject"
                            }
                          },
                          "required": [
                            "fromEmail",
                            "fromName",
                            "subject"
                          ],
                          "type": "object"
                        },
                        "message": {
                          "properties": {
                            "messageId": {
                              "type": "string",
                              "description": "ID of the message"
                            },
                            "libraryId": {
                              "type": "string",
                              "description": "Library ID of the message"
                            }
                          },
                          "required": [
                            "messageId",
                            "libraryId"
                          ],
                          "type": "object"
                        },
                        "embeddedData": {
                          "type": "object",
                          "description": "Contains up to 10 subkeys. Each of these subkeys has a name, consisting of no more than 200 characters, and a value, consisting of no more than 1024 characters.",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/distributions/{parentDistributionId}/reminders"
            }
          },
          "/distributions/{parentDistributionId}/thankyous": {
            "post": {
              "tags": [],
              "summary": "Create Thank You Distribution",
              "description": "",
              "operationId": "create-thankyou-distribution",
              "parameters": [
                {
                  "name": "parentDistributionId",
                  "in": "path",
                  "description": "Parent Distibution ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "sendDate"
                      ],
                      "properties": {
                        "sendDate": {
                          "type": "string",
                          "description": "Time to send the distribution. See [Dates and Times](doc:dates-and-times) for more information on the date and time format.",
                          "format": "date"
                        },
                        "header": {
                          "properties": {
                            "fromEmail": {
                              "type": "string",
                              "description": "Email from address"
                            },
                            "fromName": {
                              "type": "string",
                              "description": "Email from name"
                            },
                            "replyToEmail": {
                              "type": "string",
                              "description": "Email reply-to address"
                            },
                            "subject": {
                              "type": "string",
                              "description": "Email subject"
                            }
                          },
                          "required": [
                            "fromEmail",
                            "fromName",
                            "subject"
                          ],
                          "type": "object"
                        },
                        "message": {
                          "properties": {
                            "messageId": {
                              "type": "string",
                              "description": "ID of the message"
                            },
                            "libraryId": {
                              "type": "string",
                              "description": "Library ID of the message"
                            }
                          },
                          "required": [
                            "messageId",
                            "libraryId"
                          ],
                          "type": "object"
                        },
                        "embeddedData": {
                          "type": "object",
                          "description": "Contains up to 10 subkeys. Each of these subkeys has a name, consisting of no more than 200 characters, and a value, consisting of no more than 1024 characters.",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/distributions/{parentDistributionId}/thankyous"
            }
          },
          "/distributions/sms": {
            "post": {
              "tags": [],
              "summary": "Create SMS Survey Distribution",
              "description": "Create a new survey distribution via SMS",
              "operationId": "create-sms-survey-distribution",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "sendDate",
                        "method",
                        "surveyId",
                        "name"
                      ],
                      "properties": {
                        "sendDate": {
                          "type": "string",
                          "description": "Time to send the SMS. See [Dates and Times](doc:dates-and-times) for more information on the date and time format.",
                          "format": "date"
                        },
                        "method": {
                          "type": "string",
                          "description": "Determines how the survey will be sent out via SMS.  Can be either **Invite**, **Interactive**, **Reminder** or **Thankyou**.  Interactive means the questions are presented to the user one at a time in an interactive ping-pong type interactive-type session."
                        },
                        "surveyId": {
                          "type": "string",
                          "description": "ID of the survey to distribute to recipients"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name for the SMS distribution."
                        },
                        "recipients": {
                          "properties": {
                            "mailingListId": {
                              "type": "string",
                              "description": "Mailing List ID for a batch distribution - Required for Invite and Interactive method. Cannot be provided for **Reminder** and **Thankyou**"
                            },
                            "contactId": {
                              "type": "string",
                              "description": "Contact ID for an individual distribution. Cannot be provided for **Reminder** and **Thankyou**"
                            }
                          },
                          "required": [
                            "mailingListId"
                          ],
                          "type": "object"
                        },
                        "parentDistributionId": {
                          "type": "string",
                          "description": "ID of the distribution to send a **Reminder** or **Thankyou** distribution. Can be used only with these two methods."
                        },
                        "message": {
                          "properties": {
                            "messageId": {
                              "type": "string",
                              "description": "ID of the message. The **messageId** is required in conjunction with the **libraryId** if no **messageText** is supplied. A message object is only required with the **Invite**, **Reminder**, and **Thankyou** methods."
                            },
                            "libraryId": {
                              "type": "string",
                              "description": "Library ID of the message. libraryId is required in conjunction with the messageId if no messageText is supplied. A message object is only required by \"Invite\" method."
                            },
                            "messageText": {
                              "type": "string",
                              "description": "Custom message text. Either **messageText** or **messageId** must be provided but not both. A message object is only required with the **Invite**, **Reminder**, and **Thankyou** methods."
                            }
                          },
                          "required": [],
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/distributions/sms"
            },
            "get": {
              "tags": [],
              "summary": "List SMS Distributions",
              "description": "Get all sms distributions for a survey",
              "operationId": "list-sms-distributions",
              "parameters": [
                {
                  "name": "surveyId",
                  "in": "query",
                  "description": "The survey ID associated with the sms distributions",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The starting offset for the pagination. The default offset is 0. If there are additional pages, the offset value for the next page will be appended to the value of the nextPage parameter in the response.",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/distributions/sms"
            }
          },
          "/distributions/sms/{smsDistributionId}": {
            "get": {
              "tags": [],
              "summary": "Get SMS Distribution",
              "description": "Retrieve an SMS distribution's info",
              "operationId": "get-sms-distribution",
              "parameters": [
                {
                  "name": "smsDistributionId",
                  "in": "path",
                  "description": "SMS Distribution ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "surveyId",
                  "in": "query",
                  "description": "The survey ID associated with the distribution",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/distributions/sms/{smsDistributionId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete SMS Distribution",
              "description": "Deletes an sms distribution",
              "operationId": "delete-sms-distribution",
              "parameters": [
                {
                  "name": "smsDistributionId",
                  "in": "path",
                  "description": "SMS Distribution ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/distributions/sms/{smsDistributionId}"
            }
          },
          "/distributions/{distributionId}/links": {
            "get": {
              "tags": [],
              "summary": "List Distribution Links",
              "description": "Retrieve a list of individual distribution links for an existing distribution, for unsubscribed contacts in specified mailing list, the link will be null. Refer to the documentation below for further information regarding usage of this API's result.",
              "operationId": "get-distribution-links",
              "parameters": [
                {
                  "name": "distributionId",
                  "in": "path",
                  "description": "The ID returned from [Generate Distribution Links](doc:generate-distribution-invite)",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "surveyId",
                  "in": "query",
                  "description": "The ID of the survey that the distribution belongs to",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "skipToken",
                  "in": "query",
                  "description": "The pagination token to retrieve next page of distribution links. Default to empty for the first page. The fixed page size is 100.",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/distributions/{distributionId}/links"
            }
          },
          "/directories/{directoryId}/mailinglists/{mailingListId}/transactioncontacts": {
            "post": {
              "tags": [],
              "summary": "Import Contacts into Mailing List with Transactions",
              "description": "Import contacts into the specified mailing list - contacts can have associated transaction data",
              "operationId": "import-mailing-list-contacts-with-transactions",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as the pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "The mailing list ID that the contacts should be imported into",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "contacts"
                      ],
                      "properties": {
                        "transactionMeta": {
                          "type": "string",
                          "description": "A JSON object that specifies details regarding the per contact transactional data. Refer to the [documentation](doc:import-mailing-list-contacts-with-transactions#transactionmeta) below to see how this object is constructed. (optional)",
                          "default": "",
                          "format": "json"
                        },
                        "contacts": {
                          "type": "string",
                          "description": "A JSON array of JSON objects, where each object represents information about a contact. Refer to the [documentation](doc:import-mailing-list-contacts-with-transactions#contacts) below to see how this object is constructed.",
                          "default": "",
                          "format": "json"
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/directories/{directoryId}/mailinglists/{mailingListId}/transactioncontacts"
            }
          },
          "/directories/{directoryId}/mailinglists/{mailingListId}/transactioncontacts/{importId}": {
            "get": {
              "tags": [],
              "summary": "Transaction Contacts Import Status",
              "description": "Retrieve the status of the associated import request",
              "operationId": "transaction-contacts-import-status",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as the pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "The ID of the list for which the import request was initiated for",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "importId",
                  "in": "path",
                  "description": "The ID from the response of [Import Transaction Contacts](doc:import-mailing-list-contacts-with-transactions)",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/mailinglists/{mailingListId}/transactioncontacts/{importId}"
            }
          },
          "/directories/{directoryId}/mailinglists/{mailingListId}/transactioncontacts/{importId}/summary": {
            "get": {
              "tags": [],
              "summary": "Transaction Contacts Import Summary",
              "description": "Retrieve the status of the associated import request",
              "operationId": "transaction-contacts-import-summary",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as the pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "mailingListId",
                  "in": "path",
                  "description": "The ID of the list for which the import request was initiated for",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "importId",
                  "in": "path",
                  "description": "The ID from the response of [Import Transaction Contacts](doc:import-mailing-list-contacts-with-transactions)",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/mailinglists/{mailingListId}/transactioncontacts/{importId}/summary"
            }
          },
          "/tickets": {
            "get": {
              "tags": [],
              "summary": "Get Tickets",
              "description": "Page through all the tickets in an organization",
              "operationId": "get-tickets",
              "parameters": [
                {
                  "name": "offset",
                  "in": "query",
                  "description": "The start position for pagination, **minimum** is **0**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "0"
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "The maximum number of tickets to return per page, **maximum** is **50**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "50"
                  }
                },
                {
                  "name": "ownerId",
                  "in": "query",
                  "description": "The owner of the ticket, must match the pattern, **^UR_[0-9a-zA-Z]{11,15}$**",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "ticketStatus",
                  "in": "query",
                  "description": "The status of a ticket, **minimum** is **0**",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": "0"
                  }
                },
                {
                  "name": "X-API-TOKEN",
                  "in": "header",
                  "description": "Your Qualtrics API token",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/tickets"
            }
          },
          "/directories/{directoryId}/frequencyrules": {
            "post": {
              "tags": [],
              "summary": "Create Contact-Frequency Rule",
              "description": "Creates a contact-frequency rule. Please note that you can only have a maximum of 20 rules.",
              "operationId": "create-contact-frequency-rule",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "targetType",
                        "targetIds",
                        "emailType"
                      ],
                      "properties": {
                        "targetType": {
                          "type": "string",
                          "description": "The targetType for this rule. Must be ONE of the following: Directory, MailingList, Survey"
                        },
                        "targetIds": {
                          "type": "array",
                          "description": "The ids of the target. For mailing lists, this will be mailing list ids, for directories this will be directoryId, for surveys this will be surveyId",
                          "items": {
                            "type": "string"
                          }
                        },
                        "emailType": {
                          "type": "string",
                          "description": "The types of email the rule applies to. Valid values are: Invite or Email. Email is for any email message, including Invites."
                        },
                        "daysBetween": {
                          "type": "integer",
                          "description": "The days between invites or emails.",
                          "format": "int32"
                        },
                        "timePeriodLimit": {
                          "type": "object",
                          "description": "Defines the maximum number of messages a contact can receive in a given time period. This is a object with two fields: period, numMessages. numMessages is an integer and period can be Day, Week, or Month",
                          "properties": {}
                        },
                        "alwaysSend": {
                          "type": "boolean",
                          "description": "Turns on alwaysSend. If turned on, when this ContactFrequency rule conflicts with another ContactFrequency rule, this distribution will ignore the conflict and send the distribution.",
                          "default": false
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/directories/{directoryId}/frequencyrules"
            },
            "get": {
              "tags": [],
              "summary": "List Contact-Frequency Rules",
              "description": "",
              "operationId": "list-contact-frequency-rules",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/frequencyrules"
            }
          },
          "/directories/{directoryId}/frequencyrules/{ruleId}": {
            "get": {
              "tags": [],
              "summary": "Get Frequency Rule",
              "description": "",
              "operationId": "get-frequency-rule",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "ruleId",
                  "in": "path",
                  "description": "The contact frequency Rule ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/directories/{directoryId}/frequencyrules/{ruleId}"
            },
            "put": {
              "tags": [],
              "summary": "Update Contact-Frequency Rule",
              "description": "",
              "operationId": "update-contact-frequency-rule",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "ruleId",
                  "in": "path",
                  "description": "The contact frequency Rule ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "targetType",
                        "targetIds",
                        "emailType"
                      ],
                      "properties": {
                        "targetType": {
                          "type": "string",
                          "description": "The targetType for this rule. Must be ONE of the following: Directory, MailingList, Survey"
                        },
                        "targetIds": {
                          "type": "array",
                          "description": "The ids of the target. For mailing lists, this will be mailing list ids, for directories this will be directoryId, for surveys this will be surveyId",
                          "items": {
                            "type": "string"
                          }
                        },
                        "emailType": {
                          "type": "string",
                          "description": "The types of email the rule applies to. Valid values are: Invite or Email. Email is for any email message, including Invites."
                        },
                        "daysBetween": {
                          "type": "integer",
                          "description": "The days between invites or emails.",
                          "format": "int32"
                        },
                        "timePeriodLimit": {
                          "type": "object",
                          "description": "Defines the maximum number of messages a contact can receive in a given time period. This is a object with two fields: period, numMessages. numMessages is an integer and period can be Day, Week, or Month",
                          "properties": {}
                        },
                        "alwaysSend": {
                          "type": "boolean",
                          "description": "Turns on alwaysSend. If turned on, when this ContactFrequency rule conflicts with another ContactFrequency rule, this distribution will ignore the conflict and send the distribution.",
                          "default": false
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "put",
              "_path": "/directories/{directoryId}/frequencyrules/{ruleId}"
            },
            "delete": {
              "tags": [],
              "summary": "Delete Contact-Frequency Rule",
              "description": "",
              "operationId": "delete-contact-frequency-rule",
              "parameters": [
                {
                  "name": "directoryId",
                  "in": "path",
                  "description": "The directory ID, also known as a pool ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "ruleId",
                  "in": "path",
                  "description": "The contact frequency Rule ID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "delete",
              "_path": "/directories/{directoryId}/frequencyrules/{ruleId}"
            }
          },
          "/logs/activitytypes": {
            "get": {
              "tags": [],
              "summary": "Get Activity Types",
              "description": "Gets a list of all activity type logging events",
              "operationId": "get-activity-types",
              "parameters": [],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/logs/activitytypes"
            }
          },
          "/logs": {
            "get": {
              "tags": [],
              "summary": "Get Activity Log",
              "description": "",
              "operationId": "get-activity-log",
              "parameters": [
                {
                  "name": "activityType",
                  "in": "query",
                  "description": "The type of audit event you want the logs for",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "organizationId",
                  "in": "query",
                  "description": "The brand you want to search",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "default": "Your brand"
                  }
                },
                {
                  "name": "userId",
                  "in": "query",
                  "description": "The user you want to search",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "default": "Your userId"
                  }
                },
                {
                  "name": "pageSize",
                  "in": "query",
                  "description": "The maximum number of events to return per request",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "default": "100"
                  }
                },
                {
                  "name": "order",
                  "in": "query",
                  "description": "Determines how the events are organized, can be: asc or desc",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "skipToken",
                  "in": "query",
                  "description": "The next page token value returned by a previous call",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "startDate",
                  "in": "query",
                  "description": "The start date of the log event",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "format": "date",
                    "default": "7 days ago"
                  }
                },
                {
                  "name": "endDate",
                  "in": "query",
                  "description": "The end date of the log event",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "format": "date",
                    "default": "Current time"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/logs"
            }
          },
          "/op-erase-personal-data": {
            "post": {
              "tags": [],
              "summary": "Create Erasure Request",
              "description": "Create a new erasure request",
              "operationId": "create-erasure-request",
              "parameters": [],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "emails"
                      ],
                      "properties": {
                        "emails": {
                          "type": "array",
                          "description": "List of customer emails to be deleted.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "searchOnly": {
                          "type": "boolean",
                          "description": "Do a dry run of the request. Does not do any deletion of entities",
                          "default": false
                        }
                      }
                    }
                  }
                }
              },
              "deprecated": false,
              "_method": "post",
              "_path": "/op-erase-personal-data"
            },
            "get": {
              "tags": [],
              "summary": "List Erasure Requests",
              "description": "Get all Erasure Requests for a brand",
              "operationId": "get-requests",
              "parameters": [],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/op-erase-personal-data"
            }
          },
          "/op-erase-personal-data/{requestId}": {
            "get": {
              "tags": [],
              "summary": "Get Erasure Request",
              "description": "Get a single Erasure Request",
              "operationId": "get-erasure-request",
              "parameters": [
                {
                  "name": "requestId",
                  "in": "path",
                  "description": "ID of the erasure request",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": null,
              "deprecated": false,
              "_method": "get",
              "_path": "/op-erase-personal-data/{requestId}"
            }
          }
      },
      "components": {
        "schemas": {
          "Meta": {
            "title": "Meta",
            "type": "object",
            "required": [
              "httpStatus",
              "requestId"
            ],
            "properties": {
              "httpStatus": {
                "title": "httpStatus",
                "description": "HTTP status code",
                "type": "string"
              },
              "requestId": {
                "title": "requestId",
                "description": "An identifier for the incoming request.",
                "type": "string"
              }
            }
          },
          "MetaInError": {
            "title": "Meta with Error",
            "type": "object",
            "required": [
              "httpStatus",
              "requestId",
              "error"
            ],
            "properties": {
              "httpStatus": {
                "title": "httpStatus",
                "description": "HTTP status code",
                "type": "string"
              },
              "requestId": {
                "title": "requestId",
                "description": "An identifier for the incoming request.",
                "type": "string"
              },
              "error": {
                "$ref": "#/components/schemas/Error"
              }
            }
          },
          "Error": {
            "title": "Error",
            "type": "object",
            "required": [
              "errorMessage",
              "errorCode"
            ],
            "properties": {
              "errorMessage": {
                "title": "Detailed error message.",
                "description": "Detailed error message.",
                "type": "string"
              },
              "errorCode": {
                "title": "Unique error code of error.",
                "description": "Unique error code of error.",
                "type": "string"
              }
            }
          },
          "DefaultErrorResponse": {
            "title": "Default error response",
            "type": "object",
            "required": [
              "meta"
            ],
            "properties": {
              "meta": {
                "$ref": "#/components/schemas/MetaInError"
              }
            }
          },
          "SurveyNotFoundResponse": {
            "title": "Survey Not Found Response",
            "type": "object",
            "required": [
              "meta"
            ],
            "properties": {
              "meta": {
                "$ref": "#/components/schemas/MetaInError"
              }
            },
            "example": {
              "meta": {
                "httpStatus": "404 - Not Found",
                "requestId": "900df19-75fd-479d-b4c2-6fd1f4b7b3e0",
                "error": {
                  "errorCode": "ERR_X",
                  "errorMessage": "Survey Not Found"
                }
              }
            }
          },
          "SurveyResponseTooLargeResponse": {
            "title": "Survey Not Found Response",
            "type": "object",
            "required": [
              "meta"
            ],
            "properties": {
              "meta": {
                "$ref": "#/components/schemas/MetaInError"
              }
            },
            "example": {
              "meta": {
                "httpStatus": "413 - Request Entity Too Large",
                "requestId": "900df19-75fd-479d-b4c2-6fd1f4b7b3e0",
                "error": {
                  "errorCode": "ERR_X",
                  "errorMessage": "Survey Response Is Too Large"
                }
              }
            }
          },
          "CreateResponseRequest": {
            "title": "Create Response Request",
            "type": "object",
            "required": [
              "values"
            ],
            "additionalProperties": true,
            "properties": {
              "values": {
                "title": "values",
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "CreateResponseResponse": {
            "title": "Create Response Response",
            "type": "object",
            "required": [
              "result",
              "meta"
            ],
            "properties": {
              "result": {
                "title": "Result",
                "type": "object",
                "properties": {
                  "responseId": {
                    "title": "responseId",
                    "type": "string"
                  }
                }
              },
              "meta": {
                "$ref": "#/components/schemas/Meta"
              }
            },
            "example": {
              "result": {
                "responseId": "R_12345678"
              },
              "meta": {
                "httpStatus": "200 - OK",
                "requestId": "900df19-75fd-479d-b4c2-6fd1f4b7b3e0"
              }
            }
          },
          "GetResponseResponse": {
            "title": "Retrieve Response Response",
            "type": "object",
            "required": [
              "result",
              "meta"
            ],
            "properties": {
              "result": {
                "title": "Result",
                "type": "object",
                "required": [
                  "responseId",
                  "values",
                  "labels"
                ],
                "properties": {
                  "responseId": {
                    "title": "responseId",
                    "description": "The unique ID for each response",
                    "type": "string"
                  },
                  "values": {
                    "title": "values",
                    "type": "object",
                    "additionalProperties": true,
                    "description": "`values` is a set of key-value pairs corresponding to question-answer pairs. There can also be key-value pairs representing meta data for the response such as `startDate` or `userLanguage`.",
                    "required": [
                      "endDate",
                      "finished",
                      "recordedDate",
                      "startDate",
                      "status"
                    ],
                    "properties": {
                      "distributionChannel": {
                        "title": "distributionChannel",
                        "description": "The method by which the survey was distributed to respondents",
                        "type": "string"
                      },
                      "duration": {
                        "title": "duration",
                        "description": "How long it took for the respondent to finish the survey in seconds",
                        "type": "integer"
                      },
                      "endDate": {
                        "title": "endDate",
                        "description": "The point in time when the survey response was finished",
                        "type": "string",
                        "format": "date-time"
                      },
                      "finished": {
                        "title": "finished",
                        "description": "If the respondent finished and submitted the survey, the value will be 1, otherwise it will be 0",
                        "type": "integer"
                      },
                      "locationLatitude": {
                        "title": "locationLatitude",
                        "description": "The approximate location of the respondent at the time the survey was taken",
                        "type": "string"
                      },
                      "locationLongitude": {
                        "title": "locationLongitude",
                        "description": "The approximate location of the respondent at the time the survey was taken",
                        "type": "string"
                      },
                      "progress": {
                        "title": "progress",
                        "description": "How far the respondent has progressed through the survey as a percentage",
                        "type": "integer"
                      },
                      "recordedDate": {
                        "title": "recordedDate",
                        "description": "The point in time when the survey response was recorded",
                        "type": "string",
                        "format": "date-time"
                      },
                      "startDate": {
                        "title": "startDate",
                        "description": "The point in time when the survey response was started",
                        "type": "string",
                        "format": "date-time"
                      },
                      "status": {
                        "title": "status",
                        "description": "The type of response",
                        "type": "integer"
                      },
                      "userLanguage": {
                        "title": "userLanguage",
                        "description": "The language of the respondent",
                        "type": "string"
                      }
                    }
                  },
                  "labels": {
                    "title": "labels",
                    "type": "object",
                    "additionalProperties": true,
                    "description": "`labels` is a set of key-value pairs where each key corresponds to a key in the `values` object and the value is the label of the answer of that question."
                  }
                }
              },
              "meta": {
                "$ref": "#/components/schemas/Meta"
              }
            },
            "example": {
              "result": {
                "responseId": "R_123456789",
                "values": {
                  "startDate": "2019-01-31T1:00:00Z",
                  "endDate": "2019-01-31T1:01:02Z",
                  "status": 1,
                  "progress": 100,
                  "duration": 62,
                  "finished": 1,
                  "recordedDate": "2019-01-31T1:01:03.885Z",
                  "locationLatitude": "90.00000000000000",
                  "locationLongitude": "135.0000000000000000",
                  "distributionChannel": "preview",
                  "userLanguage": "EN"
                },
                "labels": {
                  "status": "Survey Preview",
                  "finished": "True"
                }
              },
              "meta": {
                "httpStatus": "200 - OK",
                "requestId": "900df19-75fd-479d-b4c2-6fd1f4b7b3e0"
              }
            }
          },
          "NotYetAvailableResponse": {
            "title": "Retrieve Response Response - Not Yet Available",
            "type": "object",
            "required": [
              "result",
              "meta"
            ],
            "properties": {
              "result": {
                "title": "Result",
                "type": "object",
                "required": [
                  "message"
                ],
                "properties": {
                  "message": {
                    "title": "Message",
                    "type": "string",
                    "description": "The Survey Response is not yet available. Please try again later."
                  }
                }
              },
              "meta": {
                "$ref": "#/components/schemas/Meta"
              }
            },
            "example": {
              "result": {
                "message": "The Survey Response is not yet available. Please try again later."
              },
              "meta": {
                "httpStatus": "202 - Accepted",
                "requestId": "900df19-75fd-479d-b4c2-6fd1f4b7b3e0"
              }
            }
          },
          "DeleteResponseResponse": {
            "title": "Delete Response Response",
            "type": "object",
            "required": [
              "meta"
            ],
            "properties": {
              "meta": {
                "$ref": "#/components/schemas/Meta"
              }
            },
            "example": {
              "meta": {
                "httpStatus": "200 - OK",
                "requestId": "900df19-75fd-479d-b4c2-6fd1f4b7b3e0"
              }
            }
          }
        },
        "parameters": {
          "surveyId": {
            "name": "surveyId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "SurveyId",
              "type": "string"
            },
            "description": "Survey ID"
          },
          "idempotencyKey": {
            "name": "Idempotency-Key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "In order to make a request to create a survey response idempotent, pass a UUID in this header. Repeated requests with the same Idempotency Key will not create duplicates."
          },
          "responseId": {
            "name": "responseId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "responseId",
              "type": "string"
            },
            "description": "Response ID"
          },
          "decrementQuotas": {
            "name": "decrementQuotas",
            "in": "query",
            "required": false,
            "schema": {
              "title": "decrementQuotas",
              "type": "boolean",
              "default": false
            },
            "description": "If true, any relevant quotas will be decremented."
          },
          "SkipToken": {
            "description": "The start position for pagination",
            "title": "SkipToken",
            "type": "string"
          },
          "Since": {
            "description": "The date from which to begin searching for contacts",
            "example": "2008-01-02T00:00:00",
            "title": "Since",
            "type": "string",
            "format": "date-time"
          },
          "PageSize": {
            "description": "The maximum number of contacts to return per request",
            "title": "PageSize",
            "type": "integer",
            "minimum": 1,
            "maximum": 50,
            "default": 50
          },
          "DirectoryId": {
            "description": "The directory ID, also known as a pool ID",
            "example": "POOL_012345678901234",
            "title": "DirectoryId",
            "type": "string"
          },
          "MailingListId": {
            "description": "The ID for the desired mailing list",
            "example": "CG_012345678901234",
            "title": "MailingListId",
            "type": "string"
          },
          "InvalidArguments": {
            "title": "InvalidArguments",
            "type": "object",
            "required": [
              "errors"
            ],
            "properties": {
              "errors": {
                "title": "Errors",
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "PageOfContacts": {
            "title": "PageOfContacts",
            "type": "object",
            "required": [
              "result",
              "meta"
            ],
            "properties": {
              "result": {
                "title": "Result",
                "type": "object",
                "required": [
                  "elements"
                ],
                "properties": {
                  "elements": {
                    "title": "Elements",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SingleContact"
                    }
                  },
                  "nextPage": {
                    "$ref": "#/components/schemas/NextPage"
                  }
                }
              },
              "meta": {
                "title": "Meta",
                "type": "object",
                "required": [
                  "requestId",
                  "httpStatus"
                ],
                "properties": {
                  "requestId": {
                    "title": "RequestId",
                    "type": "string"
                  },
                  "httpStatus": {
                    "title": "HttpStatus",
                    "type": "string"
                  }
                }
              }
            },
            "example": {
              "result": {
                "elements": [
                  {
                    "contactId": "CID_012345678901234",
                    "firstName": "exampleFirstName0",
                    "lastName": "exampleLastName0",
                    "email": "example0@example.com",
                    "phone": "0000000000",
                    "extRef": "reference.com",
                    "language": "es",
                    "directoryUnsubscribed": false,
                    "directoryUnsubscribeDate": null,
                    "mailingListUnsubscribed": false,
                    "mailingListUnsubscribeDate": null
                  },
                  {
                    "contactId": "CID_012345678901235",
                    "firstName": "exampleFirstName1",
                    "lastName": "exampleLastName1",
                    "email": "example1@example.com",
                    "extRef": "reference.com",
                    "phone": null,
                    "language": "de",
                    "directoryUnsubscribed": false,
                    "directoryUnsubscribeDate": null,
                    "mailingListUnsubscribed": false,
                    "mailingListUnsubscribeDate": null
                  }
                ],
                "nextPage": null
              },
              "meta": {
                "httpStatus": "200 - OK"
              }
            }
          },
          "PageOfDirectories": {
            "title": "PageOfDirectories",
            "type": "object",
            "required": [
              "result",
              "meta"
            ],
            "properties": {
              "result": {
                "title": "Result",
                "type": "object",
                "required": [
                  "elements"
                ],
                "properties": {
                  "elements": {
                    "title": "Elements",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SingleDirectory"
                    }
                  },
                  "nextPage": {
                    "$ref": "#/components/schemas/NextPage"
                  }
                }
              },
              "meta": {
                "title": "Meta",
                "type": "object",
                "required": [
                  "requestId",
                  "httpStatus"
                ],
                "properties": {
                  "requestId": {
                    "title": "RequestId",
                    "type": "string"
                  },
                  "httpStatus": {
                    "title": "HttpStatus",
                    "type": "string"
                  }
                }
              }
            },
            "example": {
              "result": {
                "elements": [
                  {
                    "directoryId": "POOL_abcedef123",
                    "name": "newdir1",
                    "contactCount": 10,
                    "isDefault": "true",
                    "deduplicationCriteria": {
                      "email": true,
                      "firstName": false,
                      "lastName": true,
                      "externalDataReference": false,
                      "phone": false
                    }
                  },
                  {
                    "directoryId": "POOL_abcedeffgdf",
                    "name": "newdir2",
                    "contactCount": 110,
                    "isDefault": "false",
                    "deduplicationCriteria": {
                      "email": true,
                      "firstName": false,
                      "lastName": true,
                      "externalDataReference": false,
                      "phone": false
                    }
                  }
                ],
                "nextPage": null
              },
              "meta": {
                "httpStatus": "200 - OK"
              }
            }
          },
          "NextPage": {
            "title": "NextPage",
            "type": "string",
            "nullable": true
          },
          "SingleContact": {
            "title": "SingleContact",
            "type": "object",
            "required": [
              "contactId"
            ],
            "properties": {
              "contactId": {
                "$ref": "#/components/schemas/ContactId"
              },
              "firstName": {
                "$ref": "#/components/schemas/FirstName"
              },
              "lastName": {
                "$ref": "#/components/schemas/LastName"
              },
              "email": {
                "$ref": "#/components/schemas/Email"
              },
              "phone": {
                "$ref": "#/components/schemas/Phone"
              },
              "extRef": {
                "$ref": "#/components/schemas/ExtRef"
              },
              "language": {
                "$ref": "#/components/schemas/Language"
              },
              "directoryUnsubscribed": {
                "$ref": "#/components/schemas/DirectoryUnsubscribed"
              },
              "directoryUnsubscribeDate": {
                "$ref": "#/components/schemas/DirectoryUnsubscribeDate"
              },
              "mailingListUnsubscribed": {
                "$ref": "#/components/schemas/MailingListUnsubscribed"
              },
              "mailingListUnsubscribeDate": {
                "$ref": "#/components/schemas/MailingListUnsubscribeDate"
              }
            }
          },
          "SingleDirectory": {
            "title": "SingleDirectory",
            "type": "object",
            "required": [
              "directoryId",
              "name",
              "contactCount",
              "isDefault"
            ],
            "properties": {
              "directoryId": {
                "$ref": "#/components/schemas/DirectoryId"
              },
              "name": {
                "$ref": "#/components/schemas/DirectoryName"
              },
              "contactCount": {
                "$ref": "#/components/schemas/DirectoryContactCount"
              },
              "isDefault": {
                "$ref": "#/components/schemas/IsDefault"
              },
              "deduplicationCriteria": {
                "$ref": "#/components/schemas/DeduplicationCriteria"
              }
            }
          },
          "ContactId": {
            "title": "ContactId",
            "type": "string",
            "example": "CID_012345678901234",
            "nullable": false
          },
          "FirstName": {
            "title": "FirstName",
            "type": "string",
            "nullable": true
          },
          "LastName": {
            "title": "LastName",
            "type": "string",
            "nullable": true
          },
          "Email": {
            "title": "Email",
            "type": "string",
            "nullable": true
          },
          "Phone": {
            "title": "Phone",
            "type": "string",
            "nullable": true
          },
          "ExtRef": {
            "title": "ExtRef",
            "type": "string",
            "nullable": true
          },
          "Language": {
            "title": "Language",
            "type": "string",
            "nullable": true
          },
          "DirectoryUnsubscribed": {
            "title": "DirectoryUnsubscribed",
            "type": "boolean",
            "nullable": false
          },
          "DirectoryUnsubscribeDate": {
            "title": "DirectoryUnsubscribeDate",
            "type": "string",
            "nullable": true
          },
          "MailingListUnsubscribed": {
            "title": "MailingListUnsubscribed",
            "type": "boolean",
            "nullable": false
          },
          "MailingListUnsubscribeDate": {
            "title": "MailingListUnsubscribeDate",
            "type": "string",
            "nullable": true
          },
          "DirectoryName": {
            "title": "DirectoryName",
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "DirectoryContactCount": {
            "title": "DirectoryContactCount",
            "description": "An approximate count of the contacts in the directory.",
            "type": "integer",
            "nullable": false
          },
          "IsDefault": {
            "title": "IsDefault",
            "type": "boolean",
            "nullable": false
          },
          "DedupOnEmail": {
            "title": "DedupOnEmail",
            "type": "boolean",
            "nullable": false
          },
          "DedupOnFirstName": {
            "title": "DedupOnFirstName",
            "type": "boolean",
            "nullable": false
          },
          "DedupOnLastName": {
            "title": "DedupOnLastName",
            "type": "boolean",
            "nullable": false
          },
          "DedupOnExternalDataReference": {
            "title": "DedupOnExternalDataReference",
            "type": "boolean",
            "nullable": false
          },
          "DedupOnPhone": {
            "title": "DedupOnPhone",
            "type": "boolean",
            "nullable": false
          },
          "DeduplicationCriteria": {
            "title": "DeduplicationCriteria",
            "type": "object",
            "required": [
              "email",
              "firstName",
              "lastName",
              "externalDataReference",
              "phone"
            ],
            "properties": {
              "email": {
                "$ref": "#/components/schemas/DedupOnEmail"
              },
              "firstName": {
                "$ref": "#/components/schemas/DedupOnFirstName"
              },
              "lastName": {
                "$ref": "#/components/schemas/DedupOnLastName"
              },
              "externalDataReference": {
                "$ref": "#/components/schemas/DedupOnExternalDataReference"
              },
              "phone": {
                "$ref": "#/components/schemas/DedupOnPhone"
              }
            }
          }
        },

        "securitySchemes": {
          "api_token": {
            "type": "apiKey",
            "description": "This is a schema for x-api-token header authentication.",
            "name": "X-API-TOKEN",
            "in": "header"
          },
          "public_oauth2": {
            "type": "oauth2",
            "description": "This is a schema for a public oauth2 api.",
            "flows": {
              "clientCredentials": {
                "authorizationUrl": "https://${env}.qualtrics.com/oauth2/auth",
                "tokenUrl": "https://${env}.qualtrics.com/oauth2/token",
                "scopes": {}
              }
            }
          }
        }
      },
      "x-explorer-enabled": true,
      "x-proxy-enabled": true,
      "x-samples-enabled": true,
      "x-samples-languages": [
        "curl",
        "node",
        "ruby",
        "javascript",
        "python"
      ]
    }
    
